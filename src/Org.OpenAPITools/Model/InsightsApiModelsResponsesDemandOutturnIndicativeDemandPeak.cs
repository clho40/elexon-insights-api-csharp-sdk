/*
 * Insights.Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// InsightsApiModelsResponsesDemandOutturnIndicativeDemandPeak
    /// </summary>
    [DataContract(Name = "Insights.Api.Models.Responses.DemandOutturn.IndicativeDemandPeak")]
    public partial class InsightsApiModelsResponsesDemandOutturnIndicativeDemandPeak : IEquatable<InsightsApiModelsResponsesDemandOutturnIndicativeDemandPeak>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InsightsApiModelsResponsesDemandOutturnIndicativeDemandPeak" /> class.
        /// </summary>
        /// <param name="settlementDate">settlementDate.</param>
        /// <param name="settlementPeriod">settlementPeriod.</param>
        /// <param name="halfHourEndTime">halfHourEndTime.</param>
        /// <param name="demand">demand.</param>
        /// <param name="settlementRunType">settlementRunType.</param>
        public InsightsApiModelsResponsesDemandOutturnIndicativeDemandPeak(DateTime settlementDate = default(DateTime), int settlementPeriod = default(int), DateTime halfHourEndTime = default(DateTime), double demand = default(double), string settlementRunType = default(string))
        {
            this.SettlementDate = settlementDate;
            this.SettlementPeriod = settlementPeriod;
            this.HalfHourEndTime = halfHourEndTime;
            this.Demand = demand;
            this.SettlementRunType = settlementRunType;
        }

        /// <summary>
        /// Gets or Sets SettlementDate
        /// </summary>
        /// <example>Fri Oct 01 02:00:00 CEST 2021</example>
        [DataMember(Name = "settlementDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime SettlementDate { get; set; }

        /// <summary>
        /// Gets or Sets SettlementPeriod
        /// </summary>
        /// <example>3</example>
        [DataMember(Name = "settlementPeriod", EmitDefaultValue = false)]
        public int SettlementPeriod { get; set; }

        /// <summary>
        /// Gets or Sets HalfHourEndTime
        /// </summary>
        /// <example>2021-10-01T01:00Z</example>
        [DataMember(Name = "halfHourEndTime", EmitDefaultValue = false)]
        public DateTime HalfHourEndTime { get; set; }

        /// <summary>
        /// Gets or Sets Demand
        /// </summary>
        /// <example>36256</example>
        [DataMember(Name = "demand", EmitDefaultValue = false)]
        public double Demand { get; set; }

        /// <summary>
        /// Gets or Sets SettlementRunType
        /// </summary>
        /// <example>II</example>
        [DataMember(Name = "settlementRunType", EmitDefaultValue = true)]
        public string SettlementRunType { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InsightsApiModelsResponsesDemandOutturnIndicativeDemandPeak {\n");
            sb.Append("  SettlementDate: ").Append(SettlementDate).Append("\n");
            sb.Append("  SettlementPeriod: ").Append(SettlementPeriod).Append("\n");
            sb.Append("  HalfHourEndTime: ").Append(HalfHourEndTime).Append("\n");
            sb.Append("  Demand: ").Append(Demand).Append("\n");
            sb.Append("  SettlementRunType: ").Append(SettlementRunType).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InsightsApiModelsResponsesDemandOutturnIndicativeDemandPeak);
        }

        /// <summary>
        /// Returns true if InsightsApiModelsResponsesDemandOutturnIndicativeDemandPeak instances are equal
        /// </summary>
        /// <param name="input">Instance of InsightsApiModelsResponsesDemandOutturnIndicativeDemandPeak to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InsightsApiModelsResponsesDemandOutturnIndicativeDemandPeak input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SettlementDate == input.SettlementDate ||
                    (this.SettlementDate != null &&
                    this.SettlementDate.Equals(input.SettlementDate))
                ) && 
                (
                    this.SettlementPeriod == input.SettlementPeriod ||
                    this.SettlementPeriod.Equals(input.SettlementPeriod)
                ) && 
                (
                    this.HalfHourEndTime == input.HalfHourEndTime ||
                    (this.HalfHourEndTime != null &&
                    this.HalfHourEndTime.Equals(input.HalfHourEndTime))
                ) && 
                (
                    this.Demand == input.Demand ||
                    this.Demand.Equals(input.Demand)
                ) && 
                (
                    this.SettlementRunType == input.SettlementRunType ||
                    (this.SettlementRunType != null &&
                    this.SettlementRunType.Equals(input.SettlementRunType))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SettlementDate != null)
                {
                    hashCode = (hashCode * 59) + this.SettlementDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SettlementPeriod.GetHashCode();
                if (this.HalfHourEndTime != null)
                {
                    hashCode = (hashCode * 59) + this.HalfHourEndTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Demand.GetHashCode();
                if (this.SettlementRunType != null)
                {
                    hashCode = (hashCode * 59) + this.SettlementRunType.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
