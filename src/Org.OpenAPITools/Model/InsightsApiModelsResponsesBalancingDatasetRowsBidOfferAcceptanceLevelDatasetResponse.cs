/*
 * Insights.Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// InsightsApiModelsResponsesBalancingDatasetRowsBidOfferAcceptanceLevelDatasetResponse
    /// </summary>
    [DataContract(Name = "Insights.Api.Models.Responses.Balancing.DatasetRows.BidOfferAcceptanceLevelDatasetResponse")]
    public partial class InsightsApiModelsResponsesBalancingDatasetRowsBidOfferAcceptanceLevelDatasetResponse : IEquatable<InsightsApiModelsResponsesBalancingDatasetRowsBidOfferAcceptanceLevelDatasetResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InsightsApiModelsResponsesBalancingDatasetRowsBidOfferAcceptanceLevelDatasetResponse" /> class.
        /// </summary>
        /// <param name="dataset">dataset.</param>
        /// <param name="settlementDate">settlementDate.</param>
        /// <param name="settlementPeriodFrom">settlementPeriodFrom.</param>
        /// <param name="settlementPeriodTo">settlementPeriodTo.</param>
        /// <param name="timeFrom">timeFrom.</param>
        /// <param name="timeTo">timeTo.</param>
        /// <param name="levelFrom">levelFrom.</param>
        /// <param name="levelTo">levelTo.</param>
        /// <param name="acceptanceNumber">acceptanceNumber.</param>
        /// <param name="acceptanceTime">acceptanceTime.</param>
        /// <param name="deemedBoFlag">deemedBoFlag.</param>
        /// <param name="soFlag">soFlag.</param>
        /// <param name="amendmentFlag">amendmentFlag.</param>
        /// <param name="storFlag">storFlag.</param>
        /// <param name="rrFlag">rrFlag.</param>
        /// <param name="nationalGridBmUnit">nationalGridBmUnit.</param>
        /// <param name="bmUnit">bmUnit.</param>
        public InsightsApiModelsResponsesBalancingDatasetRowsBidOfferAcceptanceLevelDatasetResponse(string dataset = default(string), DateTime settlementDate = default(DateTime), int settlementPeriodFrom = default(int), int settlementPeriodTo = default(int), DateTime timeFrom = default(DateTime), DateTime timeTo = default(DateTime), int levelFrom = default(int), int levelTo = default(int), int acceptanceNumber = default(int), DateTime acceptanceTime = default(DateTime), bool deemedBoFlag = default(bool), bool soFlag = default(bool), string amendmentFlag = default(string), bool storFlag = default(bool), bool rrFlag = default(bool), string nationalGridBmUnit = default(string), string bmUnit = default(string))
        {
            this.Dataset = dataset;
            this.SettlementDate = settlementDate;
            this.SettlementPeriodFrom = settlementPeriodFrom;
            this.SettlementPeriodTo = settlementPeriodTo;
            this.TimeFrom = timeFrom;
            this.TimeTo = timeTo;
            this.LevelFrom = levelFrom;
            this.LevelTo = levelTo;
            this.AcceptanceNumber = acceptanceNumber;
            this.AcceptanceTime = acceptanceTime;
            this.DeemedBoFlag = deemedBoFlag;
            this.SoFlag = soFlag;
            this.AmendmentFlag = amendmentFlag;
            this.StorFlag = storFlag;
            this.RrFlag = rrFlag;
            this.NationalGridBmUnit = nationalGridBmUnit;
            this.BmUnit = bmUnit;
        }

        /// <summary>
        /// Gets or Sets Dataset
        /// </summary>
        /// <example>BOALF</example>
        [DataMember(Name = "dataset", EmitDefaultValue = true)]
        public string Dataset { get; set; }

        /// <summary>
        /// Gets or Sets SettlementDate
        /// </summary>
        /// <example>Mon Jul 25 02:00:00 CEST 2022</example>
        [DataMember(Name = "settlementDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime SettlementDate { get; set; }

        /// <summary>
        /// Gets or Sets SettlementPeriodFrom
        /// </summary>
        /// <example>29</example>
        [DataMember(Name = "settlementPeriodFrom", EmitDefaultValue = false)]
        public int SettlementPeriodFrom { get; set; }

        /// <summary>
        /// Gets or Sets SettlementPeriodTo
        /// </summary>
        /// <example>32</example>
        [DataMember(Name = "settlementPeriodTo", EmitDefaultValue = false)]
        public int SettlementPeriodTo { get; set; }

        /// <summary>
        /// Gets or Sets TimeFrom
        /// </summary>
        /// <example>2022-06-25T13:34Z</example>
        [DataMember(Name = "timeFrom", EmitDefaultValue = false)]
        public DateTime TimeFrom { get; set; }

        /// <summary>
        /// Gets or Sets TimeTo
        /// </summary>
        /// <example>2022-06-25T13:37Z</example>
        [DataMember(Name = "timeTo", EmitDefaultValue = false)]
        public DateTime TimeTo { get; set; }

        /// <summary>
        /// Gets or Sets LevelFrom
        /// </summary>
        /// <example>5</example>
        [DataMember(Name = "levelFrom", EmitDefaultValue = false)]
        public int LevelFrom { get; set; }

        /// <summary>
        /// Gets or Sets LevelTo
        /// </summary>
        /// <example>46</example>
        [DataMember(Name = "levelTo", EmitDefaultValue = false)]
        public int LevelTo { get; set; }

        /// <summary>
        /// Gets or Sets AcceptanceNumber
        /// </summary>
        /// <example>1234567</example>
        [DataMember(Name = "acceptanceNumber", EmitDefaultValue = false)]
        public int AcceptanceNumber { get; set; }

        /// <summary>
        /// Gets or Sets AcceptanceTime
        /// </summary>
        /// <example>2022-06-25T13:37Z</example>
        [DataMember(Name = "acceptanceTime", EmitDefaultValue = false)]
        public DateTime AcceptanceTime { get; set; }

        /// <summary>
        /// Gets or Sets DeemedBoFlag
        /// </summary>
        [DataMember(Name = "deemedBoFlag", EmitDefaultValue = true)]
        public bool DeemedBoFlag { get; set; }

        /// <summary>
        /// Gets or Sets SoFlag
        /// </summary>
        [DataMember(Name = "soFlag", EmitDefaultValue = true)]
        public bool SoFlag { get; set; }

        /// <summary>
        /// Gets or Sets AmendmentFlag
        /// </summary>
        /// <example>ORI</example>
        [DataMember(Name = "amendmentFlag", EmitDefaultValue = true)]
        public string AmendmentFlag { get; set; }

        /// <summary>
        /// Gets or Sets StorFlag
        /// </summary>
        [DataMember(Name = "storFlag", EmitDefaultValue = true)]
        public bool StorFlag { get; set; }

        /// <summary>
        /// Gets or Sets RrFlag
        /// </summary>
        [DataMember(Name = "rrFlag", EmitDefaultValue = true)]
        public bool RrFlag { get; set; }

        /// <summary>
        /// Gets or Sets NationalGridBmUnit
        /// </summary>
        /// <example>ABRBO-1</example>
        [DataMember(Name = "nationalGridBmUnit", EmitDefaultValue = true)]
        public string NationalGridBmUnit { get; set; }

        /// <summary>
        /// Gets or Sets BmUnit
        /// </summary>
        /// <example>T_ABRBO-1</example>
        [DataMember(Name = "bmUnit", EmitDefaultValue = true)]
        public string BmUnit { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InsightsApiModelsResponsesBalancingDatasetRowsBidOfferAcceptanceLevelDatasetResponse {\n");
            sb.Append("  Dataset: ").Append(Dataset).Append("\n");
            sb.Append("  SettlementDate: ").Append(SettlementDate).Append("\n");
            sb.Append("  SettlementPeriodFrom: ").Append(SettlementPeriodFrom).Append("\n");
            sb.Append("  SettlementPeriodTo: ").Append(SettlementPeriodTo).Append("\n");
            sb.Append("  TimeFrom: ").Append(TimeFrom).Append("\n");
            sb.Append("  TimeTo: ").Append(TimeTo).Append("\n");
            sb.Append("  LevelFrom: ").Append(LevelFrom).Append("\n");
            sb.Append("  LevelTo: ").Append(LevelTo).Append("\n");
            sb.Append("  AcceptanceNumber: ").Append(AcceptanceNumber).Append("\n");
            sb.Append("  AcceptanceTime: ").Append(AcceptanceTime).Append("\n");
            sb.Append("  DeemedBoFlag: ").Append(DeemedBoFlag).Append("\n");
            sb.Append("  SoFlag: ").Append(SoFlag).Append("\n");
            sb.Append("  AmendmentFlag: ").Append(AmendmentFlag).Append("\n");
            sb.Append("  StorFlag: ").Append(StorFlag).Append("\n");
            sb.Append("  RrFlag: ").Append(RrFlag).Append("\n");
            sb.Append("  NationalGridBmUnit: ").Append(NationalGridBmUnit).Append("\n");
            sb.Append("  BmUnit: ").Append(BmUnit).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InsightsApiModelsResponsesBalancingDatasetRowsBidOfferAcceptanceLevelDatasetResponse);
        }

        /// <summary>
        /// Returns true if InsightsApiModelsResponsesBalancingDatasetRowsBidOfferAcceptanceLevelDatasetResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of InsightsApiModelsResponsesBalancingDatasetRowsBidOfferAcceptanceLevelDatasetResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InsightsApiModelsResponsesBalancingDatasetRowsBidOfferAcceptanceLevelDatasetResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Dataset == input.Dataset ||
                    (this.Dataset != null &&
                    this.Dataset.Equals(input.Dataset))
                ) && 
                (
                    this.SettlementDate == input.SettlementDate ||
                    (this.SettlementDate != null &&
                    this.SettlementDate.Equals(input.SettlementDate))
                ) && 
                (
                    this.SettlementPeriodFrom == input.SettlementPeriodFrom ||
                    this.SettlementPeriodFrom.Equals(input.SettlementPeriodFrom)
                ) && 
                (
                    this.SettlementPeriodTo == input.SettlementPeriodTo ||
                    this.SettlementPeriodTo.Equals(input.SettlementPeriodTo)
                ) && 
                (
                    this.TimeFrom == input.TimeFrom ||
                    (this.TimeFrom != null &&
                    this.TimeFrom.Equals(input.TimeFrom))
                ) && 
                (
                    this.TimeTo == input.TimeTo ||
                    (this.TimeTo != null &&
                    this.TimeTo.Equals(input.TimeTo))
                ) && 
                (
                    this.LevelFrom == input.LevelFrom ||
                    this.LevelFrom.Equals(input.LevelFrom)
                ) && 
                (
                    this.LevelTo == input.LevelTo ||
                    this.LevelTo.Equals(input.LevelTo)
                ) && 
                (
                    this.AcceptanceNumber == input.AcceptanceNumber ||
                    this.AcceptanceNumber.Equals(input.AcceptanceNumber)
                ) && 
                (
                    this.AcceptanceTime == input.AcceptanceTime ||
                    (this.AcceptanceTime != null &&
                    this.AcceptanceTime.Equals(input.AcceptanceTime))
                ) && 
                (
                    this.DeemedBoFlag == input.DeemedBoFlag ||
                    this.DeemedBoFlag.Equals(input.DeemedBoFlag)
                ) && 
                (
                    this.SoFlag == input.SoFlag ||
                    this.SoFlag.Equals(input.SoFlag)
                ) && 
                (
                    this.AmendmentFlag == input.AmendmentFlag ||
                    (this.AmendmentFlag != null &&
                    this.AmendmentFlag.Equals(input.AmendmentFlag))
                ) && 
                (
                    this.StorFlag == input.StorFlag ||
                    this.StorFlag.Equals(input.StorFlag)
                ) && 
                (
                    this.RrFlag == input.RrFlag ||
                    this.RrFlag.Equals(input.RrFlag)
                ) && 
                (
                    this.NationalGridBmUnit == input.NationalGridBmUnit ||
                    (this.NationalGridBmUnit != null &&
                    this.NationalGridBmUnit.Equals(input.NationalGridBmUnit))
                ) && 
                (
                    this.BmUnit == input.BmUnit ||
                    (this.BmUnit != null &&
                    this.BmUnit.Equals(input.BmUnit))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Dataset != null)
                {
                    hashCode = (hashCode * 59) + this.Dataset.GetHashCode();
                }
                if (this.SettlementDate != null)
                {
                    hashCode = (hashCode * 59) + this.SettlementDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SettlementPeriodFrom.GetHashCode();
                hashCode = (hashCode * 59) + this.SettlementPeriodTo.GetHashCode();
                if (this.TimeFrom != null)
                {
                    hashCode = (hashCode * 59) + this.TimeFrom.GetHashCode();
                }
                if (this.TimeTo != null)
                {
                    hashCode = (hashCode * 59) + this.TimeTo.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.LevelFrom.GetHashCode();
                hashCode = (hashCode * 59) + this.LevelTo.GetHashCode();
                hashCode = (hashCode * 59) + this.AcceptanceNumber.GetHashCode();
                if (this.AcceptanceTime != null)
                {
                    hashCode = (hashCode * 59) + this.AcceptanceTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DeemedBoFlag.GetHashCode();
                hashCode = (hashCode * 59) + this.SoFlag.GetHashCode();
                if (this.AmendmentFlag != null)
                {
                    hashCode = (hashCode * 59) + this.AmendmentFlag.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.StorFlag.GetHashCode();
                hashCode = (hashCode * 59) + this.RrFlag.GetHashCode();
                if (this.NationalGridBmUnit != null)
                {
                    hashCode = (hashCode * 59) + this.NationalGridBmUnit.GetHashCode();
                }
                if (this.BmUnit != null)
                {
                    hashCode = (hashCode * 59) + this.BmUnit.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
