/*
 * Insights.Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// InsightsApiModelsResponsesGenerationForecastFuelData
    /// </summary>
    [DataContract(Name = "Insights.Api.Models.Responses.Generation.ForecastFuelData")]
    public partial class InsightsApiModelsResponsesGenerationForecastFuelData : IEquatable<InsightsApiModelsResponsesGenerationForecastFuelData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InsightsApiModelsResponsesGenerationForecastFuelData" /> class.
        /// </summary>
        /// <param name="fuelType">fuelType.</param>
        /// <param name="outputUsable">outputUsable.</param>
        public InsightsApiModelsResponsesGenerationForecastFuelData(string fuelType = default(string), long outputUsable = default(long))
        {
            this.FuelType = fuelType;
            this.OutputUsable = outputUsable;
        }

        /// <summary>
        /// Gets or Sets FuelType
        /// </summary>
        [DataMember(Name = "fuelType", EmitDefaultValue = true)]
        public string FuelType { get; set; }

        /// <summary>
        /// Gets or Sets OutputUsable
        /// </summary>
        [DataMember(Name = "outputUsable", EmitDefaultValue = false)]
        public long OutputUsable { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InsightsApiModelsResponsesGenerationForecastFuelData {\n");
            sb.Append("  FuelType: ").Append(FuelType).Append("\n");
            sb.Append("  OutputUsable: ").Append(OutputUsable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InsightsApiModelsResponsesGenerationForecastFuelData);
        }

        /// <summary>
        /// Returns true if InsightsApiModelsResponsesGenerationForecastFuelData instances are equal
        /// </summary>
        /// <param name="input">Instance of InsightsApiModelsResponsesGenerationForecastFuelData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InsightsApiModelsResponsesGenerationForecastFuelData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.FuelType == input.FuelType ||
                    (this.FuelType != null &&
                    this.FuelType.Equals(input.FuelType))
                ) && 
                (
                    this.OutputUsable == input.OutputUsable ||
                    this.OutputUsable.Equals(input.OutputUsable)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.FuelType != null)
                {
                    hashCode = (hashCode * 59) + this.FuelType.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.OutputUsable.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
