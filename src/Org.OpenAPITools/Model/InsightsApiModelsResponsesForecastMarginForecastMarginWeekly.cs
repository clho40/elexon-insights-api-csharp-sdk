/*
 * Insights.Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// InsightsApiModelsResponsesForecastMarginForecastMarginWeekly
    /// </summary>
    [DataContract(Name = "Insights.Api.Models.Responses.ForecastMargin.ForecastMarginWeekly")]
    public partial class InsightsApiModelsResponsesForecastMarginForecastMarginWeekly : IEquatable<InsightsApiModelsResponsesForecastMarginForecastMarginWeekly>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InsightsApiModelsResponsesForecastMarginForecastMarginWeekly" /> class.
        /// </summary>
        /// <param name="publishTime">publishTime.</param>
        /// <param name="margin">margin.</param>
        /// <param name="week">week.</param>
        /// <param name="year">year.</param>
        /// <param name="weekStartDate">weekStartDate.</param>
        public InsightsApiModelsResponsesForecastMarginForecastMarginWeekly(DateTime publishTime = default(DateTime), long? margin = default(long?), int week = default(int), int year = default(int), DateTime weekStartDate = default(DateTime))
        {
            this.PublishTime = publishTime;
            this.Margin = margin;
            this.Week = week;
            this.Year = year;
            this.WeekStartDate = weekStartDate;
        }

        /// <summary>
        /// Gets or Sets PublishTime
        /// </summary>
        [DataMember(Name = "publishTime", EmitDefaultValue = false)]
        public DateTime PublishTime { get; set; }

        /// <summary>
        /// Gets or Sets Margin
        /// </summary>
        [DataMember(Name = "margin", EmitDefaultValue = true)]
        public long? Margin { get; set; }

        /// <summary>
        /// Gets or Sets Week
        /// </summary>
        [DataMember(Name = "week", EmitDefaultValue = false)]
        public int Week { get; set; }

        /// <summary>
        /// Gets or Sets Year
        /// </summary>
        [DataMember(Name = "year", EmitDefaultValue = false)]
        public int Year { get; set; }

        /// <summary>
        /// Gets or Sets WeekStartDate
        /// </summary>
        [DataMember(Name = "weekStartDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime WeekStartDate { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InsightsApiModelsResponsesForecastMarginForecastMarginWeekly {\n");
            sb.Append("  PublishTime: ").Append(PublishTime).Append("\n");
            sb.Append("  Margin: ").Append(Margin).Append("\n");
            sb.Append("  Week: ").Append(Week).Append("\n");
            sb.Append("  Year: ").Append(Year).Append("\n");
            sb.Append("  WeekStartDate: ").Append(WeekStartDate).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InsightsApiModelsResponsesForecastMarginForecastMarginWeekly);
        }

        /// <summary>
        /// Returns true if InsightsApiModelsResponsesForecastMarginForecastMarginWeekly instances are equal
        /// </summary>
        /// <param name="input">Instance of InsightsApiModelsResponsesForecastMarginForecastMarginWeekly to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InsightsApiModelsResponsesForecastMarginForecastMarginWeekly input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.PublishTime == input.PublishTime ||
                    (this.PublishTime != null &&
                    this.PublishTime.Equals(input.PublishTime))
                ) && 
                (
                    this.Margin == input.Margin ||
                    (this.Margin != null &&
                    this.Margin.Equals(input.Margin))
                ) && 
                (
                    this.Week == input.Week ||
                    this.Week.Equals(input.Week)
                ) && 
                (
                    this.Year == input.Year ||
                    this.Year.Equals(input.Year)
                ) && 
                (
                    this.WeekStartDate == input.WeekStartDate ||
                    (this.WeekStartDate != null &&
                    this.WeekStartDate.Equals(input.WeekStartDate))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.PublishTime != null)
                {
                    hashCode = (hashCode * 59) + this.PublishTime.GetHashCode();
                }
                if (this.Margin != null)
                {
                    hashCode = (hashCode * 59) + this.Margin.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Week.GetHashCode();
                hashCode = (hashCode * 59) + this.Year.GetHashCode();
                if (this.WeekStartDate != null)
                {
                    hashCode = (hashCode * 59) + this.WeekStartDate.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
