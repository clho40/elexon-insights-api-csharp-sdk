/*
 * Insights.Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByFuelTypeDaily
    /// </summary>
    [DataContract(Name = "Insights.Api.Models.Responses.Generation.DatasetRows.AvailabilityByFuelTypeDaily")]
    public partial class InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByFuelTypeDaily : IEquatable<InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByFuelTypeDaily>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByFuelTypeDaily" /> class.
        /// </summary>
        /// <param name="dataset">dataset.</param>
        /// <param name="fuelType">fuelType.</param>
        /// <param name="publishTime">publishTime.</param>
        /// <param name="systemZone">systemZone.</param>
        /// <param name="forecastDate">forecastDate.</param>
        /// <param name="outputUsable">outputUsable.</param>
        /// <param name="biddingZone">biddingZone.</param>
        /// <param name="interconnectorName">interconnectorName.</param>
        /// <param name="interconnector">interconnector.</param>
        public InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByFuelTypeDaily(string dataset = default(string), string fuelType = default(string), DateTime? publishTime = default(DateTime?), string systemZone = default(string), DateTime forecastDate = default(DateTime), long? outputUsable = default(long?), string biddingZone = default(string), string interconnectorName = default(string), bool interconnector = default(bool))
        {
            this.Dataset = dataset;
            this.FuelType = fuelType;
            this.PublishTime = publishTime;
            this.SystemZone = systemZone;
            this.ForecastDate = forecastDate;
            this.OutputUsable = outputUsable;
            this.BiddingZone = biddingZone;
            this.InterconnectorName = interconnectorName;
            this.Interconnector = interconnector;
        }

        /// <summary>
        /// Gets or Sets Dataset
        /// </summary>
        [DataMember(Name = "dataset", EmitDefaultValue = true)]
        public string Dataset { get; set; }

        /// <summary>
        /// Gets or Sets FuelType
        /// </summary>
        [DataMember(Name = "fuelType", EmitDefaultValue = true)]
        public string FuelType { get; set; }

        /// <summary>
        /// Gets or Sets PublishTime
        /// </summary>
        [DataMember(Name = "publishTime", EmitDefaultValue = true)]
        public DateTime? PublishTime { get; set; }

        /// <summary>
        /// Gets or Sets SystemZone
        /// </summary>
        [DataMember(Name = "systemZone", EmitDefaultValue = true)]
        public string SystemZone { get; set; }

        /// <summary>
        /// Gets or Sets ForecastDate
        /// </summary>
        [DataMember(Name = "forecastDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime ForecastDate { get; set; }

        /// <summary>
        /// Gets or Sets ForecastDateTimezone
        /// </summary>
        [DataMember(Name = "forecastDateTimezone", EmitDefaultValue = true)]
        public string ForecastDateTimezone { get; private set; }

        /// <summary>
        /// Returns false as ForecastDateTimezone should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeForecastDateTimezone()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets OutputUsable
        /// </summary>
        [DataMember(Name = "outputUsable", EmitDefaultValue = true)]
        public long? OutputUsable { get; set; }

        /// <summary>
        /// Gets or Sets BiddingZone
        /// </summary>
        [DataMember(Name = "biddingZone", EmitDefaultValue = true)]
        public string BiddingZone { get; set; }

        /// <summary>
        /// Gets or Sets InterconnectorName
        /// </summary>
        [DataMember(Name = "interconnectorName", EmitDefaultValue = true)]
        public string InterconnectorName { get; set; }

        /// <summary>
        /// Gets or Sets Interconnector
        /// </summary>
        [DataMember(Name = "interconnector", EmitDefaultValue = true)]
        public bool Interconnector { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByFuelTypeDaily {\n");
            sb.Append("  Dataset: ").Append(Dataset).Append("\n");
            sb.Append("  FuelType: ").Append(FuelType).Append("\n");
            sb.Append("  PublishTime: ").Append(PublishTime).Append("\n");
            sb.Append("  SystemZone: ").Append(SystemZone).Append("\n");
            sb.Append("  ForecastDate: ").Append(ForecastDate).Append("\n");
            sb.Append("  ForecastDateTimezone: ").Append(ForecastDateTimezone).Append("\n");
            sb.Append("  OutputUsable: ").Append(OutputUsable).Append("\n");
            sb.Append("  BiddingZone: ").Append(BiddingZone).Append("\n");
            sb.Append("  InterconnectorName: ").Append(InterconnectorName).Append("\n");
            sb.Append("  Interconnector: ").Append(Interconnector).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByFuelTypeDaily);
        }

        /// <summary>
        /// Returns true if InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByFuelTypeDaily instances are equal
        /// </summary>
        /// <param name="input">Instance of InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByFuelTypeDaily to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InsightsApiModelsResponsesGenerationDatasetRowsAvailabilityByFuelTypeDaily input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Dataset == input.Dataset ||
                    (this.Dataset != null &&
                    this.Dataset.Equals(input.Dataset))
                ) && 
                (
                    this.FuelType == input.FuelType ||
                    (this.FuelType != null &&
                    this.FuelType.Equals(input.FuelType))
                ) && 
                (
                    this.PublishTime == input.PublishTime ||
                    (this.PublishTime != null &&
                    this.PublishTime.Equals(input.PublishTime))
                ) && 
                (
                    this.SystemZone == input.SystemZone ||
                    (this.SystemZone != null &&
                    this.SystemZone.Equals(input.SystemZone))
                ) && 
                (
                    this.ForecastDate == input.ForecastDate ||
                    (this.ForecastDate != null &&
                    this.ForecastDate.Equals(input.ForecastDate))
                ) && 
                (
                    this.ForecastDateTimezone == input.ForecastDateTimezone ||
                    (this.ForecastDateTimezone != null &&
                    this.ForecastDateTimezone.Equals(input.ForecastDateTimezone))
                ) && 
                (
                    this.OutputUsable == input.OutputUsable ||
                    (this.OutputUsable != null &&
                    this.OutputUsable.Equals(input.OutputUsable))
                ) && 
                (
                    this.BiddingZone == input.BiddingZone ||
                    (this.BiddingZone != null &&
                    this.BiddingZone.Equals(input.BiddingZone))
                ) && 
                (
                    this.InterconnectorName == input.InterconnectorName ||
                    (this.InterconnectorName != null &&
                    this.InterconnectorName.Equals(input.InterconnectorName))
                ) && 
                (
                    this.Interconnector == input.Interconnector ||
                    this.Interconnector.Equals(input.Interconnector)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Dataset != null)
                {
                    hashCode = (hashCode * 59) + this.Dataset.GetHashCode();
                }
                if (this.FuelType != null)
                {
                    hashCode = (hashCode * 59) + this.FuelType.GetHashCode();
                }
                if (this.PublishTime != null)
                {
                    hashCode = (hashCode * 59) + this.PublishTime.GetHashCode();
                }
                if (this.SystemZone != null)
                {
                    hashCode = (hashCode * 59) + this.SystemZone.GetHashCode();
                }
                if (this.ForecastDate != null)
                {
                    hashCode = (hashCode * 59) + this.ForecastDate.GetHashCode();
                }
                if (this.ForecastDateTimezone != null)
                {
                    hashCode = (hashCode * 59) + this.ForecastDateTimezone.GetHashCode();
                }
                if (this.OutputUsable != null)
                {
                    hashCode = (hashCode * 59) + this.OutputUsable.GetHashCode();
                }
                if (this.BiddingZone != null)
                {
                    hashCode = (hashCode * 59) + this.BiddingZone.GetHashCode();
                }
                if (this.InterconnectorName != null)
                {
                    hashCode = (hashCode * 59) + this.InterconnectorName.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Interconnector.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
