/*
 * Insights.Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// InsightsApiModelsResponsesMiscTemperatureData
    /// </summary>
    [DataContract(Name = "Insights.Api.Models.Responses.Misc.TemperatureData")]
    public partial class InsightsApiModelsResponsesMiscTemperatureData : IEquatable<InsightsApiModelsResponsesMiscTemperatureData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InsightsApiModelsResponsesMiscTemperatureData" /> class.
        /// </summary>
        /// <param name="measurementDate">measurementDate.</param>
        /// <param name="publishTime">publishTime.</param>
        /// <param name="temperature">temperature.</param>
        /// <param name="temperatureReferenceAverage">temperatureReferenceAverage.</param>
        /// <param name="temperatureReferenceHigh">temperatureReferenceHigh.</param>
        /// <param name="temperatureReferenceLow">temperatureReferenceLow.</param>
        public InsightsApiModelsResponsesMiscTemperatureData(DateTime measurementDate = default(DateTime), DateTime? publishTime = default(DateTime?), double? temperature = default(double?), double? temperatureReferenceAverage = default(double?), double? temperatureReferenceHigh = default(double?), double? temperatureReferenceLow = default(double?))
        {
            this.MeasurementDate = measurementDate;
            this.PublishTime = publishTime;
            this.Temperature = temperature;
            this.TemperatureReferenceAverage = temperatureReferenceAverage;
            this.TemperatureReferenceHigh = temperatureReferenceHigh;
            this.TemperatureReferenceLow = temperatureReferenceLow;
        }

        /// <summary>
        /// Gets or Sets MeasurementDate
        /// </summary>
        [DataMember(Name = "measurementDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime MeasurementDate { get; set; }

        /// <summary>
        /// Gets or Sets PublishTime
        /// </summary>
        [DataMember(Name = "publishTime", EmitDefaultValue = true)]
        public DateTime? PublishTime { get; set; }

        /// <summary>
        /// Gets or Sets Temperature
        /// </summary>
        [DataMember(Name = "temperature", EmitDefaultValue = true)]
        public double? Temperature { get; set; }

        /// <summary>
        /// Gets or Sets TemperatureReferenceAverage
        /// </summary>
        [DataMember(Name = "temperatureReferenceAverage", EmitDefaultValue = true)]
        public double? TemperatureReferenceAverage { get; set; }

        /// <summary>
        /// Gets or Sets TemperatureReferenceHigh
        /// </summary>
        [DataMember(Name = "temperatureReferenceHigh", EmitDefaultValue = true)]
        public double? TemperatureReferenceHigh { get; set; }

        /// <summary>
        /// Gets or Sets TemperatureReferenceLow
        /// </summary>
        [DataMember(Name = "temperatureReferenceLow", EmitDefaultValue = true)]
        public double? TemperatureReferenceLow { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InsightsApiModelsResponsesMiscTemperatureData {\n");
            sb.Append("  MeasurementDate: ").Append(MeasurementDate).Append("\n");
            sb.Append("  PublishTime: ").Append(PublishTime).Append("\n");
            sb.Append("  Temperature: ").Append(Temperature).Append("\n");
            sb.Append("  TemperatureReferenceAverage: ").Append(TemperatureReferenceAverage).Append("\n");
            sb.Append("  TemperatureReferenceHigh: ").Append(TemperatureReferenceHigh).Append("\n");
            sb.Append("  TemperatureReferenceLow: ").Append(TemperatureReferenceLow).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InsightsApiModelsResponsesMiscTemperatureData);
        }

        /// <summary>
        /// Returns true if InsightsApiModelsResponsesMiscTemperatureData instances are equal
        /// </summary>
        /// <param name="input">Instance of InsightsApiModelsResponsesMiscTemperatureData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InsightsApiModelsResponsesMiscTemperatureData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.MeasurementDate == input.MeasurementDate ||
                    (this.MeasurementDate != null &&
                    this.MeasurementDate.Equals(input.MeasurementDate))
                ) && 
                (
                    this.PublishTime == input.PublishTime ||
                    (this.PublishTime != null &&
                    this.PublishTime.Equals(input.PublishTime))
                ) && 
                (
                    this.Temperature == input.Temperature ||
                    (this.Temperature != null &&
                    this.Temperature.Equals(input.Temperature))
                ) && 
                (
                    this.TemperatureReferenceAverage == input.TemperatureReferenceAverage ||
                    (this.TemperatureReferenceAverage != null &&
                    this.TemperatureReferenceAverage.Equals(input.TemperatureReferenceAverage))
                ) && 
                (
                    this.TemperatureReferenceHigh == input.TemperatureReferenceHigh ||
                    (this.TemperatureReferenceHigh != null &&
                    this.TemperatureReferenceHigh.Equals(input.TemperatureReferenceHigh))
                ) && 
                (
                    this.TemperatureReferenceLow == input.TemperatureReferenceLow ||
                    (this.TemperatureReferenceLow != null &&
                    this.TemperatureReferenceLow.Equals(input.TemperatureReferenceLow))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.MeasurementDate != null)
                {
                    hashCode = (hashCode * 59) + this.MeasurementDate.GetHashCode();
                }
                if (this.PublishTime != null)
                {
                    hashCode = (hashCode * 59) + this.PublishTime.GetHashCode();
                }
                if (this.Temperature != null)
                {
                    hashCode = (hashCode * 59) + this.Temperature.GetHashCode();
                }
                if (this.TemperatureReferenceAverage != null)
                {
                    hashCode = (hashCode * 59) + this.TemperatureReferenceAverage.GetHashCode();
                }
                if (this.TemperatureReferenceHigh != null)
                {
                    hashCode = (hashCode * 59) + this.TemperatureReferenceHigh.GetHashCode();
                }
                if (this.TemperatureReferenceLow != null)
                {
                    hashCode = (hashCode * 59) + this.TemperatureReferenceLow.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
