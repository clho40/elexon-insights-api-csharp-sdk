/*
 * Insights.Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// InsightsApiModelsResponsesTransparencyDatasetRowsActualGenerationOutputPerGenerationUnitDatasetResponse
    /// </summary>
    [DataContract(Name = "Insights.Api.Models.Responses.Transparency.DatasetRows.ActualGenerationOutputPerGenerationUnitDatasetResponse")]
    public partial class InsightsApiModelsResponsesTransparencyDatasetRowsActualGenerationOutputPerGenerationUnitDatasetResponse : IEquatable<InsightsApiModelsResponsesTransparencyDatasetRowsActualGenerationOutputPerGenerationUnitDatasetResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InsightsApiModelsResponsesTransparencyDatasetRowsActualGenerationOutputPerGenerationUnitDatasetResponse" /> class.
        /// </summary>
        /// <param name="dataset">dataset.</param>
        /// <param name="psrType">psrType.</param>
        /// <param name="bmUnit">bmUnit.</param>
        /// <param name="nationalGridBmUnitId">nationalGridBmUnitId.</param>
        /// <param name="settlementDate">settlementDate.</param>
        /// <param name="settlementPeriod">settlementPeriod.</param>
        /// <param name="halfHourEndTime">halfHourEndTime.</param>
        /// <param name="quantity">quantity.</param>
        public InsightsApiModelsResponsesTransparencyDatasetRowsActualGenerationOutputPerGenerationUnitDatasetResponse(string dataset = default(string), string psrType = default(string), string bmUnit = default(string), string nationalGridBmUnitId = default(string), DateTime settlementDate = default(DateTime), int settlementPeriod = default(int), DateTime halfHourEndTime = default(DateTime), double quantity = default(double))
        {
            this.Dataset = dataset;
            this.PsrType = psrType;
            this.BmUnit = bmUnit;
            this.NationalGridBmUnitId = nationalGridBmUnitId;
            this.SettlementDate = settlementDate;
            this.SettlementPeriod = settlementPeriod;
            this.HalfHourEndTime = halfHourEndTime;
            this.Quantity = quantity;
        }

        /// <summary>
        /// Gets or Sets Dataset
        /// </summary>
        /// <example>B1610</example>
        [DataMember(Name = "dataset", EmitDefaultValue = true)]
        public string Dataset { get; set; }

        /// <summary>
        /// Gets or Sets PsrType
        /// </summary>
        /// <example>Generation</example>
        [DataMember(Name = "psrType", EmitDefaultValue = true)]
        public string PsrType { get; set; }

        /// <summary>
        /// Gets or Sets BmUnit
        /// </summary>
        /// <example>T_CNQPS-1</example>
        [DataMember(Name = "bmUnit", EmitDefaultValue = true)]
        public string BmUnit { get; set; }

        /// <summary>
        /// Gets or Sets NationalGridBmUnitId
        /// </summary>
        /// <example>CNQPS-1</example>
        [DataMember(Name = "nationalGridBmUnitId", EmitDefaultValue = true)]
        public string NationalGridBmUnitId { get; set; }

        /// <summary>
        /// Gets or Sets SettlementDate
        /// </summary>
        /// <example>Fri Aug 12 02:00:00 CEST 2022</example>
        [DataMember(Name = "settlementDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime SettlementDate { get; set; }

        /// <summary>
        /// Gets or Sets SettlementPeriod
        /// </summary>
        /// <example>10</example>
        [DataMember(Name = "settlementPeriod", EmitDefaultValue = false)]
        public int SettlementPeriod { get; set; }

        /// <summary>
        /// Gets or Sets HalfHourEndTime
        /// </summary>
        /// <example>2022-08-12T04:00Z</example>
        [DataMember(Name = "halfHourEndTime", EmitDefaultValue = false)]
        public DateTime HalfHourEndTime { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        /// <example>116.109</example>
        [DataMember(Name = "quantity", EmitDefaultValue = false)]
        public double Quantity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InsightsApiModelsResponsesTransparencyDatasetRowsActualGenerationOutputPerGenerationUnitDatasetResponse {\n");
            sb.Append("  Dataset: ").Append(Dataset).Append("\n");
            sb.Append("  PsrType: ").Append(PsrType).Append("\n");
            sb.Append("  BmUnit: ").Append(BmUnit).Append("\n");
            sb.Append("  NationalGridBmUnitId: ").Append(NationalGridBmUnitId).Append("\n");
            sb.Append("  SettlementDate: ").Append(SettlementDate).Append("\n");
            sb.Append("  SettlementPeriod: ").Append(SettlementPeriod).Append("\n");
            sb.Append("  HalfHourEndTime: ").Append(HalfHourEndTime).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InsightsApiModelsResponsesTransparencyDatasetRowsActualGenerationOutputPerGenerationUnitDatasetResponse);
        }

        /// <summary>
        /// Returns true if InsightsApiModelsResponsesTransparencyDatasetRowsActualGenerationOutputPerGenerationUnitDatasetResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of InsightsApiModelsResponsesTransparencyDatasetRowsActualGenerationOutputPerGenerationUnitDatasetResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InsightsApiModelsResponsesTransparencyDatasetRowsActualGenerationOutputPerGenerationUnitDatasetResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Dataset == input.Dataset ||
                    (this.Dataset != null &&
                    this.Dataset.Equals(input.Dataset))
                ) && 
                (
                    this.PsrType == input.PsrType ||
                    (this.PsrType != null &&
                    this.PsrType.Equals(input.PsrType))
                ) && 
                (
                    this.BmUnit == input.BmUnit ||
                    (this.BmUnit != null &&
                    this.BmUnit.Equals(input.BmUnit))
                ) && 
                (
                    this.NationalGridBmUnitId == input.NationalGridBmUnitId ||
                    (this.NationalGridBmUnitId != null &&
                    this.NationalGridBmUnitId.Equals(input.NationalGridBmUnitId))
                ) && 
                (
                    this.SettlementDate == input.SettlementDate ||
                    (this.SettlementDate != null &&
                    this.SettlementDate.Equals(input.SettlementDate))
                ) && 
                (
                    this.SettlementPeriod == input.SettlementPeriod ||
                    this.SettlementPeriod.Equals(input.SettlementPeriod)
                ) && 
                (
                    this.HalfHourEndTime == input.HalfHourEndTime ||
                    (this.HalfHourEndTime != null &&
                    this.HalfHourEndTime.Equals(input.HalfHourEndTime))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    this.Quantity.Equals(input.Quantity)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Dataset != null)
                {
                    hashCode = (hashCode * 59) + this.Dataset.GetHashCode();
                }
                if (this.PsrType != null)
                {
                    hashCode = (hashCode * 59) + this.PsrType.GetHashCode();
                }
                if (this.BmUnit != null)
                {
                    hashCode = (hashCode * 59) + this.BmUnit.GetHashCode();
                }
                if (this.NationalGridBmUnitId != null)
                {
                    hashCode = (hashCode * 59) + this.NationalGridBmUnitId.GetHashCode();
                }
                if (this.SettlementDate != null)
                {
                    hashCode = (hashCode * 59) + this.SettlementDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SettlementPeriod.GetHashCode();
                if (this.HalfHourEndTime != null)
                {
                    hashCode = (hashCode * 59) + this.HalfHourEndTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Quantity.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
