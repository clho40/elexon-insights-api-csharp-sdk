/*
 * Insights.Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// InsightsApiModelsResponsesReferenceInterconnectorData
    /// </summary>
    [DataContract(Name = "Insights.Api.Models.Responses.Reference.InterconnectorData")]
    public partial class InsightsApiModelsResponsesReferenceInterconnectorData : IEquatable<InsightsApiModelsResponsesReferenceInterconnectorData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InsightsApiModelsResponsesReferenceInterconnectorData" /> class.
        /// </summary>
        /// <param name="interconnectorId">interconnectorId.</param>
        /// <param name="interconnectorName">interconnectorName.</param>
        /// <param name="interconnectorBiddingZone">interconnectorBiddingZone.</param>
        public InsightsApiModelsResponsesReferenceInterconnectorData(string interconnectorId = default(string), string interconnectorName = default(string), string interconnectorBiddingZone = default(string))
        {
            this.InterconnectorId = interconnectorId;
            this.InterconnectorName = interconnectorName;
            this.InterconnectorBiddingZone = interconnectorBiddingZone;
        }

        /// <summary>
        /// Gets or Sets InterconnectorId
        /// </summary>
        [DataMember(Name = "interconnectorId", EmitDefaultValue = true)]
        public string InterconnectorId { get; set; }

        /// <summary>
        /// Gets or Sets InterconnectorName
        /// </summary>
        [DataMember(Name = "interconnectorName", EmitDefaultValue = true)]
        public string InterconnectorName { get; set; }

        /// <summary>
        /// Gets or Sets InterconnectorBiddingZone
        /// </summary>
        [DataMember(Name = "interconnectorBiddingZone", EmitDefaultValue = true)]
        public string InterconnectorBiddingZone { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InsightsApiModelsResponsesReferenceInterconnectorData {\n");
            sb.Append("  InterconnectorId: ").Append(InterconnectorId).Append("\n");
            sb.Append("  InterconnectorName: ").Append(InterconnectorName).Append("\n");
            sb.Append("  InterconnectorBiddingZone: ").Append(InterconnectorBiddingZone).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InsightsApiModelsResponsesReferenceInterconnectorData);
        }

        /// <summary>
        /// Returns true if InsightsApiModelsResponsesReferenceInterconnectorData instances are equal
        /// </summary>
        /// <param name="input">Instance of InsightsApiModelsResponsesReferenceInterconnectorData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InsightsApiModelsResponsesReferenceInterconnectorData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.InterconnectorId == input.InterconnectorId ||
                    (this.InterconnectorId != null &&
                    this.InterconnectorId.Equals(input.InterconnectorId))
                ) && 
                (
                    this.InterconnectorName == input.InterconnectorName ||
                    (this.InterconnectorName != null &&
                    this.InterconnectorName.Equals(input.InterconnectorName))
                ) && 
                (
                    this.InterconnectorBiddingZone == input.InterconnectorBiddingZone ||
                    (this.InterconnectorBiddingZone != null &&
                    this.InterconnectorBiddingZone.Equals(input.InterconnectorBiddingZone))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.InterconnectorId != null)
                {
                    hashCode = (hashCode * 59) + this.InterconnectorId.GetHashCode();
                }
                if (this.InterconnectorName != null)
                {
                    hashCode = (hashCode * 59) + this.InterconnectorName.GetHashCode();
                }
                if (this.InterconnectorBiddingZone != null)
                {
                    hashCode = (hashCode * 59) + this.InterconnectorBiddingZone.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
