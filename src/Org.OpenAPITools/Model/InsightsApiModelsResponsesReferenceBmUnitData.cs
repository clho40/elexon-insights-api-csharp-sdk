/*
 * Insights.Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// InsightsApiModelsResponsesReferenceBmUnitData
    /// </summary>
    [DataContract(Name = "Insights.Api.Models.Responses.Reference.BmUnitData")]
    public partial class InsightsApiModelsResponsesReferenceBmUnitData : IEquatable<InsightsApiModelsResponsesReferenceBmUnitData>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InsightsApiModelsResponsesReferenceBmUnitData" /> class.
        /// </summary>
        /// <param name="nationalGridBmUnit">nationalGridBmUnit.</param>
        /// <param name="elexonBmUnit">elexonBmUnit.</param>
        /// <param name="fuelType">fuelType.</param>
        /// <param name="leadPartyName">leadPartyName.</param>
        /// <param name="bmUnitType">bmUnitType.</param>
        /// <param name="fpnFlag">fpnFlag.</param>
        public InsightsApiModelsResponsesReferenceBmUnitData(string nationalGridBmUnit = default(string), string elexonBmUnit = default(string), string fuelType = default(string), string leadPartyName = default(string), string bmUnitType = default(string), bool? fpnFlag = default(bool?))
        {
            this.NationalGridBmUnit = nationalGridBmUnit;
            this.ElexonBmUnit = elexonBmUnit;
            this.FuelType = fuelType;
            this.LeadPartyName = leadPartyName;
            this.BmUnitType = bmUnitType;
            this.FpnFlag = fpnFlag;
        }

        /// <summary>
        /// Gets or Sets NationalGridBmUnit
        /// </summary>
        [DataMember(Name = "nationalGridBmUnit", EmitDefaultValue = true)]
        public string NationalGridBmUnit { get; set; }

        /// <summary>
        /// Gets or Sets ElexonBmUnit
        /// </summary>
        [DataMember(Name = "elexonBmUnit", EmitDefaultValue = true)]
        public string ElexonBmUnit { get; set; }

        /// <summary>
        /// Gets or Sets FuelType
        /// </summary>
        [DataMember(Name = "fuelType", EmitDefaultValue = true)]
        public string FuelType { get; set; }

        /// <summary>
        /// Gets or Sets LeadPartyName
        /// </summary>
        [DataMember(Name = "leadPartyName", EmitDefaultValue = true)]
        public string LeadPartyName { get; set; }

        /// <summary>
        /// Gets or Sets BmUnitType
        /// </summary>
        [DataMember(Name = "bmUnitType", EmitDefaultValue = true)]
        public string BmUnitType { get; set; }

        /// <summary>
        /// Gets or Sets FpnFlag
        /// </summary>
        [DataMember(Name = "fpnFlag", EmitDefaultValue = true)]
        public bool? FpnFlag { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InsightsApiModelsResponsesReferenceBmUnitData {\n");
            sb.Append("  NationalGridBmUnit: ").Append(NationalGridBmUnit).Append("\n");
            sb.Append("  ElexonBmUnit: ").Append(ElexonBmUnit).Append("\n");
            sb.Append("  FuelType: ").Append(FuelType).Append("\n");
            sb.Append("  LeadPartyName: ").Append(LeadPartyName).Append("\n");
            sb.Append("  BmUnitType: ").Append(BmUnitType).Append("\n");
            sb.Append("  FpnFlag: ").Append(FpnFlag).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InsightsApiModelsResponsesReferenceBmUnitData);
        }

        /// <summary>
        /// Returns true if InsightsApiModelsResponsesReferenceBmUnitData instances are equal
        /// </summary>
        /// <param name="input">Instance of InsightsApiModelsResponsesReferenceBmUnitData to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InsightsApiModelsResponsesReferenceBmUnitData input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.NationalGridBmUnit == input.NationalGridBmUnit ||
                    (this.NationalGridBmUnit != null &&
                    this.NationalGridBmUnit.Equals(input.NationalGridBmUnit))
                ) && 
                (
                    this.ElexonBmUnit == input.ElexonBmUnit ||
                    (this.ElexonBmUnit != null &&
                    this.ElexonBmUnit.Equals(input.ElexonBmUnit))
                ) && 
                (
                    this.FuelType == input.FuelType ||
                    (this.FuelType != null &&
                    this.FuelType.Equals(input.FuelType))
                ) && 
                (
                    this.LeadPartyName == input.LeadPartyName ||
                    (this.LeadPartyName != null &&
                    this.LeadPartyName.Equals(input.LeadPartyName))
                ) && 
                (
                    this.BmUnitType == input.BmUnitType ||
                    (this.BmUnitType != null &&
                    this.BmUnitType.Equals(input.BmUnitType))
                ) && 
                (
                    this.FpnFlag == input.FpnFlag ||
                    (this.FpnFlag != null &&
                    this.FpnFlag.Equals(input.FpnFlag))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.NationalGridBmUnit != null)
                {
                    hashCode = (hashCode * 59) + this.NationalGridBmUnit.GetHashCode();
                }
                if (this.ElexonBmUnit != null)
                {
                    hashCode = (hashCode * 59) + this.ElexonBmUnit.GetHashCode();
                }
                if (this.FuelType != null)
                {
                    hashCode = (hashCode * 59) + this.FuelType.GetHashCode();
                }
                if (this.LeadPartyName != null)
                {
                    hashCode = (hashCode * 59) + this.LeadPartyName.GetHashCode();
                }
                if (this.BmUnitType != null)
                {
                    hashCode = (hashCode * 59) + this.BmUnitType.GetHashCode();
                }
                if (this.FpnFlag != null)
                {
                    hashCode = (hashCode * 59) + this.FpnFlag.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
