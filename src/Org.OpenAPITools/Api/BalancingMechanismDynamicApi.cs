/*
 * Insights.Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBalancingMechanismDynamicApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Dynamic Datasets Market-wide
        /// </summary>
        /// <remarks>
        /// This endpoint provides the dynamic data for multiple requested BMUs or all BMUs, excluding dynamic rate data.  It returns the data valid for a single settlement period. This includes a snapshot of data valid at the start  of the settlement period, and any changes published during that settlement period.                By default, all of the relevant datasets are returned: SIL, SEL, NDZ, NTB, NTO, MZT, MNZT, MDV &amp; MDP.  The results from each dataset are transformed to a common response model, with the common integer field *Value*  mapped from the fields *Level*, *Period*, *Volume* or *Notice* in the original dataset, as relevant.                The settlement period to query can be specified as a date and settlement period, or as a datetime  which will resolve to the settlement period that time falls within.    All Dates and DateTimes should be expressed as defined within  &lt;a href&#x3D;\&quot;https://datatracker.ietf.org/doc/html/rfc3339#section-5.6\&quot; target&#x3D;\&quot;_blank\&quot;&gt;RFC 3339&lt;/a&gt;.    Some examples of date parameter combinations are shown below.                Filtering by datetime:                    /balancing/dynamic/all?settlementDate&#x3D;2023-01-18T01:00Z                Filtering by settlement date and period:                    /balancing/dynamic/all?settlementDate&#x3D;2023-01-18&amp;settlementPeriod&#x3D;3
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settlementDate">The settlement date or datetime to filter.</param>
        /// <param name="settlementPeriod">The settlement period to filter. This should be an integer from 1-50 inclusive. (optional)</param>
        /// <param name="bmUnit">The BM Units to query. Elexon or NGC BMU IDs can be used. If omitted, results for all BM units will be returned. (optional)</param>
        /// <param name="dataset">Datasets to filter. If omitted, all datasets will be returned. (optional)</param>
        /// <param name="format">Response data format. Use json/xml to include metadata. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicDynamicData</returns>
        InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicDynamicData BalancingDynamicAllGet(DateTime settlementDate, int? settlementPeriod = default(int?), List<string>? bmUnit = default(List<string>?), List<string>? dataset = default(List<string>?), string? format = default(string?), int operationIndex = 0);

        /// <summary>
        /// Dynamic Datasets Market-wide
        /// </summary>
        /// <remarks>
        /// This endpoint provides the dynamic data for multiple requested BMUs or all BMUs, excluding dynamic rate data.  It returns the data valid for a single settlement period. This includes a snapshot of data valid at the start  of the settlement period, and any changes published during that settlement period.                By default, all of the relevant datasets are returned: SIL, SEL, NDZ, NTB, NTO, MZT, MNZT, MDV &amp; MDP.  The results from each dataset are transformed to a common response model, with the common integer field *Value*  mapped from the fields *Level*, *Period*, *Volume* or *Notice* in the original dataset, as relevant.                The settlement period to query can be specified as a date and settlement period, or as a datetime  which will resolve to the settlement period that time falls within.    All Dates and DateTimes should be expressed as defined within  &lt;a href&#x3D;\&quot;https://datatracker.ietf.org/doc/html/rfc3339#section-5.6\&quot; target&#x3D;\&quot;_blank\&quot;&gt;RFC 3339&lt;/a&gt;.    Some examples of date parameter combinations are shown below.                Filtering by datetime:                    /balancing/dynamic/all?settlementDate&#x3D;2023-01-18T01:00Z                Filtering by settlement date and period:                    /balancing/dynamic/all?settlementDate&#x3D;2023-01-18&amp;settlementPeriod&#x3D;3
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settlementDate">The settlement date or datetime to filter.</param>
        /// <param name="settlementPeriod">The settlement period to filter. This should be an integer from 1-50 inclusive. (optional)</param>
        /// <param name="bmUnit">The BM Units to query. Elexon or NGC BMU IDs can be used. If omitted, results for all BM units will be returned. (optional)</param>
        /// <param name="dataset">Datasets to filter. If omitted, all datasets will be returned. (optional)</param>
        /// <param name="format">Response data format. Use json/xml to include metadata. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicDynamicData</returns>
        ApiResponse<InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicDynamicData> BalancingDynamicAllGetWithHttpInfo(DateTime settlementDate, int? settlementPeriod = default(int?), List<string>? bmUnit = default(List<string>?), List<string>? dataset = default(List<string>?), string? format = default(string?), int operationIndex = 0);
        /// <summary>
        /// Dynamic Datasets Per-BMU
        /// </summary>
        /// <remarks>
        /// This endpoint provides the dynamic data for a requested BMU, excluding physical rate data.  It returns a \&quot;snapshot\&quot; of data valid at a given time, and optionally a time series of changes over a requested interval.                By default, all of the relevant datasets are returned: SIL, SEL, NDZ, NTB, NTO, MZT, MNZT, MDV, MDP.  The results from each dataset are transformed to a common response model, with the common integer field *Value*  mapped from the fields *Level*, *Period*, *Volume* or *Notice* in the original dataset, as relevant.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bmUnit">The BM Unit to query.</param>
        /// <param name="snapshotAt">When to retrieve a snapshot of data at.  That is, the latest datapoint before this time will be returned for each dataset.</param>
        /// <param name="until">When to retrieve data until.  Data from the snapshot until this time will be returned. (optional)</param>
        /// <param name="snapshotAtSettlementPeriod">The settlement period to retrieve a snapshot of data at.  If provided, the time part of SnapshotAt will be ignored. (optional)</param>
        /// <param name="untilSettlementPeriod">The settlement period to retrieve data until.  If provided, the time part of Until will be ignored. (optional)</param>
        /// <param name="dataset">Datasets to filter. If omitted, all datasets will be returned. (optional)</param>
        /// <param name="format">Response data format. Use json/xml to include metadata. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicDynamicData</returns>
        InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicDynamicData BalancingDynamicGet(string bmUnit, DateTime snapshotAt, DateTime? until = default(DateTime?), int? snapshotAtSettlementPeriod = default(int?), int? untilSettlementPeriod = default(int?), List<string>? dataset = default(List<string>?), string? format = default(string?), int operationIndex = 0);

        /// <summary>
        /// Dynamic Datasets Per-BMU
        /// </summary>
        /// <remarks>
        /// This endpoint provides the dynamic data for a requested BMU, excluding physical rate data.  It returns a \&quot;snapshot\&quot; of data valid at a given time, and optionally a time series of changes over a requested interval.                By default, all of the relevant datasets are returned: SIL, SEL, NDZ, NTB, NTO, MZT, MNZT, MDV, MDP.  The results from each dataset are transformed to a common response model, with the common integer field *Value*  mapped from the fields *Level*, *Period*, *Volume* or *Notice* in the original dataset, as relevant.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bmUnit">The BM Unit to query.</param>
        /// <param name="snapshotAt">When to retrieve a snapshot of data at.  That is, the latest datapoint before this time will be returned for each dataset.</param>
        /// <param name="until">When to retrieve data until.  Data from the snapshot until this time will be returned. (optional)</param>
        /// <param name="snapshotAtSettlementPeriod">The settlement period to retrieve a snapshot of data at.  If provided, the time part of SnapshotAt will be ignored. (optional)</param>
        /// <param name="untilSettlementPeriod">The settlement period to retrieve data until.  If provided, the time part of Until will be ignored. (optional)</param>
        /// <param name="dataset">Datasets to filter. If omitted, all datasets will be returned. (optional)</param>
        /// <param name="format">Response data format. Use json/xml to include metadata. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicDynamicData</returns>
        ApiResponse<InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicDynamicData> BalancingDynamicGetWithHttpInfo(string bmUnit, DateTime snapshotAt, DateTime? until = default(DateTime?), int? snapshotAtSettlementPeriod = default(int?), int? untilSettlementPeriod = default(int?), List<string>? dataset = default(List<string>?), string? format = default(string?), int operationIndex = 0);
        /// <summary>
        /// Rate Datasets Market-Wide
        /// </summary>
        /// <remarks>
        /// This endpoint provides market-wide physical rate data, for all BMUs or a requested set of multiple BMUs.  It returns the data valid for a given settlement period. This includes a snapshot of data valid at the start  of the settlement period, and any changes published during that settlement period.                The settlement period to query can be specified as a date and settlement period, or as a datetime  which will resolve to the settlement period that time falls within.    By default, all of the relevant datasets are returned: RDRE, RURE, RDRI, RURI.                All Dates and DateTimes should be expressed as defined within  &lt;a href&#x3D;\&quot;https://datatracker.ietf.org/doc/html/rfc3339#section-5.6\&quot; target&#x3D;\&quot;_blank\&quot;&gt;RFC 3339&lt;/a&gt;.    Some examples of date parameter combinations are shown below.                Filtering by datetime:                    /balancing/dynamic/rates/all?settlementDate&#x3D;2023-01-18T01:00Z                Filtering by settlement date and period:                    /balancing/dynamic/rates/all?settlementDate&#x3D;2023-01-18&amp;settlementPeriod&#x3D;3
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settlementDate">The settlement date or datetime to filter.</param>
        /// <param name="settlementPeriod">The settlement period to filter. This should be an integer from 1-50 inclusive. (optional)</param>
        /// <param name="bmUnit">The BM Units to query. Elexon or NGC BMU IDs can be used. If omitted, results for all BM units will be returned. (optional)</param>
        /// <param name="dataset">Datasets to return. If omitted, all datasets will be returned. (optional)</param>
        /// <param name="format">Response data format. Use json/xml to include metadata. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicRateData</returns>
        InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicRateData BalancingDynamicRatesAllGet(DateTime settlementDate, int? settlementPeriod = default(int?), List<string>? bmUnit = default(List<string>?), List<string>? dataset = default(List<string>?), string? format = default(string?), int operationIndex = 0);

        /// <summary>
        /// Rate Datasets Market-Wide
        /// </summary>
        /// <remarks>
        /// This endpoint provides market-wide physical rate data, for all BMUs or a requested set of multiple BMUs.  It returns the data valid for a given settlement period. This includes a snapshot of data valid at the start  of the settlement period, and any changes published during that settlement period.                The settlement period to query can be specified as a date and settlement period, or as a datetime  which will resolve to the settlement period that time falls within.    By default, all of the relevant datasets are returned: RDRE, RURE, RDRI, RURI.                All Dates and DateTimes should be expressed as defined within  &lt;a href&#x3D;\&quot;https://datatracker.ietf.org/doc/html/rfc3339#section-5.6\&quot; target&#x3D;\&quot;_blank\&quot;&gt;RFC 3339&lt;/a&gt;.    Some examples of date parameter combinations are shown below.                Filtering by datetime:                    /balancing/dynamic/rates/all?settlementDate&#x3D;2023-01-18T01:00Z                Filtering by settlement date and period:                    /balancing/dynamic/rates/all?settlementDate&#x3D;2023-01-18&amp;settlementPeriod&#x3D;3
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settlementDate">The settlement date or datetime to filter.</param>
        /// <param name="settlementPeriod">The settlement period to filter. This should be an integer from 1-50 inclusive. (optional)</param>
        /// <param name="bmUnit">The BM Units to query. Elexon or NGC BMU IDs can be used. If omitted, results for all BM units will be returned. (optional)</param>
        /// <param name="dataset">Datasets to return. If omitted, all datasets will be returned. (optional)</param>
        /// <param name="format">Response data format. Use json/xml to include metadata. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicRateData</returns>
        ApiResponse<InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicRateData> BalancingDynamicRatesAllGetWithHttpInfo(DateTime settlementDate, int? settlementPeriod = default(int?), List<string>? bmUnit = default(List<string>?), List<string>? dataset = default(List<string>?), string? format = default(string?), int operationIndex = 0);
        /// <summary>
        /// Rate Datasets Per-BMU
        /// </summary>
        /// <remarks>
        /// This endpoint provides the physical rate data for a requested BMU.  It returns a \&quot;snapshot\&quot; of data valid at a given time, and optionally a time series of changes over a requested interval.                By default, all of the relevant datasets are returned: RDRE, RURE, RDRI, RURI.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bmUnit">The BM Unit to query.</param>
        /// <param name="snapshotAt">When to retrieve a snapshot of data at.  That is, the latest datapoint before this time will be returned for each dataset.</param>
        /// <param name="until">When to retrieve data until.  Data from the snapshot until this time will be returned. (optional)</param>
        /// <param name="snapshotAtSettlementPeriod">The settlement period to retrieve a snapshot of data at.  If provided, the time part of SnapshotAt will be ignored. (optional)</param>
        /// <param name="untilSettlementPeriod">The settlement period to retrieve data until.  If provided, the time part of Until will be ignored. (optional)</param>
        /// <param name="dataset">Datasets to filter. If empty, all datasets will be returned. (optional)</param>
        /// <param name="format">Response data format. Use json/xml to include metadata. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicRateData</returns>
        InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicRateData BalancingDynamicRatesGet(string bmUnit, DateTime snapshotAt, DateTime? until = default(DateTime?), int? snapshotAtSettlementPeriod = default(int?), int? untilSettlementPeriod = default(int?), List<string>? dataset = default(List<string>?), string? format = default(string?), int operationIndex = 0);

        /// <summary>
        /// Rate Datasets Per-BMU
        /// </summary>
        /// <remarks>
        /// This endpoint provides the physical rate data for a requested BMU.  It returns a \&quot;snapshot\&quot; of data valid at a given time, and optionally a time series of changes over a requested interval.                By default, all of the relevant datasets are returned: RDRE, RURE, RDRI, RURI.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bmUnit">The BM Unit to query.</param>
        /// <param name="snapshotAt">When to retrieve a snapshot of data at.  That is, the latest datapoint before this time will be returned for each dataset.</param>
        /// <param name="until">When to retrieve data until.  Data from the snapshot until this time will be returned. (optional)</param>
        /// <param name="snapshotAtSettlementPeriod">The settlement period to retrieve a snapshot of data at.  If provided, the time part of SnapshotAt will be ignored. (optional)</param>
        /// <param name="untilSettlementPeriod">The settlement period to retrieve data until.  If provided, the time part of Until will be ignored. (optional)</param>
        /// <param name="dataset">Datasets to filter. If empty, all datasets will be returned. (optional)</param>
        /// <param name="format">Response data format. Use json/xml to include metadata. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicRateData</returns>
        ApiResponse<InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicRateData> BalancingDynamicRatesGetWithHttpInfo(string bmUnit, DateTime snapshotAt, DateTime? until = default(DateTime?), int? snapshotAtSettlementPeriod = default(int?), int? untilSettlementPeriod = default(int?), List<string>? dataset = default(List<string>?), string? format = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBalancingMechanismDynamicApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Dynamic Datasets Market-wide
        /// </summary>
        /// <remarks>
        /// This endpoint provides the dynamic data for multiple requested BMUs or all BMUs, excluding dynamic rate data.  It returns the data valid for a single settlement period. This includes a snapshot of data valid at the start  of the settlement period, and any changes published during that settlement period.                By default, all of the relevant datasets are returned: SIL, SEL, NDZ, NTB, NTO, MZT, MNZT, MDV &amp; MDP.  The results from each dataset are transformed to a common response model, with the common integer field *Value*  mapped from the fields *Level*, *Period*, *Volume* or *Notice* in the original dataset, as relevant.                The settlement period to query can be specified as a date and settlement period, or as a datetime  which will resolve to the settlement period that time falls within.    All Dates and DateTimes should be expressed as defined within  &lt;a href&#x3D;\&quot;https://datatracker.ietf.org/doc/html/rfc3339#section-5.6\&quot; target&#x3D;\&quot;_blank\&quot;&gt;RFC 3339&lt;/a&gt;.    Some examples of date parameter combinations are shown below.                Filtering by datetime:                    /balancing/dynamic/all?settlementDate&#x3D;2023-01-18T01:00Z                Filtering by settlement date and period:                    /balancing/dynamic/all?settlementDate&#x3D;2023-01-18&amp;settlementPeriod&#x3D;3
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settlementDate">The settlement date or datetime to filter.</param>
        /// <param name="settlementPeriod">The settlement period to filter. This should be an integer from 1-50 inclusive. (optional)</param>
        /// <param name="bmUnit">The BM Units to query. Elexon or NGC BMU IDs can be used. If omitted, results for all BM units will be returned. (optional)</param>
        /// <param name="dataset">Datasets to filter. If omitted, all datasets will be returned. (optional)</param>
        /// <param name="format">Response data format. Use json/xml to include metadata. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicDynamicData</returns>
        System.Threading.Tasks.Task<InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicDynamicData> BalancingDynamicAllGetAsync(DateTime settlementDate, int? settlementPeriod = default(int?), List<string>? bmUnit = default(List<string>?), List<string>? dataset = default(List<string>?), string? format = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Dynamic Datasets Market-wide
        /// </summary>
        /// <remarks>
        /// This endpoint provides the dynamic data for multiple requested BMUs or all BMUs, excluding dynamic rate data.  It returns the data valid for a single settlement period. This includes a snapshot of data valid at the start  of the settlement period, and any changes published during that settlement period.                By default, all of the relevant datasets are returned: SIL, SEL, NDZ, NTB, NTO, MZT, MNZT, MDV &amp; MDP.  The results from each dataset are transformed to a common response model, with the common integer field *Value*  mapped from the fields *Level*, *Period*, *Volume* or *Notice* in the original dataset, as relevant.                The settlement period to query can be specified as a date and settlement period, or as a datetime  which will resolve to the settlement period that time falls within.    All Dates and DateTimes should be expressed as defined within  &lt;a href&#x3D;\&quot;https://datatracker.ietf.org/doc/html/rfc3339#section-5.6\&quot; target&#x3D;\&quot;_blank\&quot;&gt;RFC 3339&lt;/a&gt;.    Some examples of date parameter combinations are shown below.                Filtering by datetime:                    /balancing/dynamic/all?settlementDate&#x3D;2023-01-18T01:00Z                Filtering by settlement date and period:                    /balancing/dynamic/all?settlementDate&#x3D;2023-01-18&amp;settlementPeriod&#x3D;3
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settlementDate">The settlement date or datetime to filter.</param>
        /// <param name="settlementPeriod">The settlement period to filter. This should be an integer from 1-50 inclusive. (optional)</param>
        /// <param name="bmUnit">The BM Units to query. Elexon or NGC BMU IDs can be used. If omitted, results for all BM units will be returned. (optional)</param>
        /// <param name="dataset">Datasets to filter. If omitted, all datasets will be returned. (optional)</param>
        /// <param name="format">Response data format. Use json/xml to include metadata. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicDynamicData)</returns>
        System.Threading.Tasks.Task<ApiResponse<InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicDynamicData>> BalancingDynamicAllGetWithHttpInfoAsync(DateTime settlementDate, int? settlementPeriod = default(int?), List<string>? bmUnit = default(List<string>?), List<string>? dataset = default(List<string>?), string? format = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Dynamic Datasets Per-BMU
        /// </summary>
        /// <remarks>
        /// This endpoint provides the dynamic data for a requested BMU, excluding physical rate data.  It returns a \&quot;snapshot\&quot; of data valid at a given time, and optionally a time series of changes over a requested interval.                By default, all of the relevant datasets are returned: SIL, SEL, NDZ, NTB, NTO, MZT, MNZT, MDV, MDP.  The results from each dataset are transformed to a common response model, with the common integer field *Value*  mapped from the fields *Level*, *Period*, *Volume* or *Notice* in the original dataset, as relevant.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bmUnit">The BM Unit to query.</param>
        /// <param name="snapshotAt">When to retrieve a snapshot of data at.  That is, the latest datapoint before this time will be returned for each dataset.</param>
        /// <param name="until">When to retrieve data until.  Data from the snapshot until this time will be returned. (optional)</param>
        /// <param name="snapshotAtSettlementPeriod">The settlement period to retrieve a snapshot of data at.  If provided, the time part of SnapshotAt will be ignored. (optional)</param>
        /// <param name="untilSettlementPeriod">The settlement period to retrieve data until.  If provided, the time part of Until will be ignored. (optional)</param>
        /// <param name="dataset">Datasets to filter. If omitted, all datasets will be returned. (optional)</param>
        /// <param name="format">Response data format. Use json/xml to include metadata. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicDynamicData</returns>
        System.Threading.Tasks.Task<InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicDynamicData> BalancingDynamicGetAsync(string bmUnit, DateTime snapshotAt, DateTime? until = default(DateTime?), int? snapshotAtSettlementPeriod = default(int?), int? untilSettlementPeriod = default(int?), List<string>? dataset = default(List<string>?), string? format = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Dynamic Datasets Per-BMU
        /// </summary>
        /// <remarks>
        /// This endpoint provides the dynamic data for a requested BMU, excluding physical rate data.  It returns a \&quot;snapshot\&quot; of data valid at a given time, and optionally a time series of changes over a requested interval.                By default, all of the relevant datasets are returned: SIL, SEL, NDZ, NTB, NTO, MZT, MNZT, MDV, MDP.  The results from each dataset are transformed to a common response model, with the common integer field *Value*  mapped from the fields *Level*, *Period*, *Volume* or *Notice* in the original dataset, as relevant.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bmUnit">The BM Unit to query.</param>
        /// <param name="snapshotAt">When to retrieve a snapshot of data at.  That is, the latest datapoint before this time will be returned for each dataset.</param>
        /// <param name="until">When to retrieve data until.  Data from the snapshot until this time will be returned. (optional)</param>
        /// <param name="snapshotAtSettlementPeriod">The settlement period to retrieve a snapshot of data at.  If provided, the time part of SnapshotAt will be ignored. (optional)</param>
        /// <param name="untilSettlementPeriod">The settlement period to retrieve data until.  If provided, the time part of Until will be ignored. (optional)</param>
        /// <param name="dataset">Datasets to filter. If omitted, all datasets will be returned. (optional)</param>
        /// <param name="format">Response data format. Use json/xml to include metadata. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicDynamicData)</returns>
        System.Threading.Tasks.Task<ApiResponse<InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicDynamicData>> BalancingDynamicGetWithHttpInfoAsync(string bmUnit, DateTime snapshotAt, DateTime? until = default(DateTime?), int? snapshotAtSettlementPeriod = default(int?), int? untilSettlementPeriod = default(int?), List<string>? dataset = default(List<string>?), string? format = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Rate Datasets Market-Wide
        /// </summary>
        /// <remarks>
        /// This endpoint provides market-wide physical rate data, for all BMUs or a requested set of multiple BMUs.  It returns the data valid for a given settlement period. This includes a snapshot of data valid at the start  of the settlement period, and any changes published during that settlement period.                The settlement period to query can be specified as a date and settlement period, or as a datetime  which will resolve to the settlement period that time falls within.    By default, all of the relevant datasets are returned: RDRE, RURE, RDRI, RURI.                All Dates and DateTimes should be expressed as defined within  &lt;a href&#x3D;\&quot;https://datatracker.ietf.org/doc/html/rfc3339#section-5.6\&quot; target&#x3D;\&quot;_blank\&quot;&gt;RFC 3339&lt;/a&gt;.    Some examples of date parameter combinations are shown below.                Filtering by datetime:                    /balancing/dynamic/rates/all?settlementDate&#x3D;2023-01-18T01:00Z                Filtering by settlement date and period:                    /balancing/dynamic/rates/all?settlementDate&#x3D;2023-01-18&amp;settlementPeriod&#x3D;3
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settlementDate">The settlement date or datetime to filter.</param>
        /// <param name="settlementPeriod">The settlement period to filter. This should be an integer from 1-50 inclusive. (optional)</param>
        /// <param name="bmUnit">The BM Units to query. Elexon or NGC BMU IDs can be used. If omitted, results for all BM units will be returned. (optional)</param>
        /// <param name="dataset">Datasets to return. If omitted, all datasets will be returned. (optional)</param>
        /// <param name="format">Response data format. Use json/xml to include metadata. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicRateData</returns>
        System.Threading.Tasks.Task<InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicRateData> BalancingDynamicRatesAllGetAsync(DateTime settlementDate, int? settlementPeriod = default(int?), List<string>? bmUnit = default(List<string>?), List<string>? dataset = default(List<string>?), string? format = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Rate Datasets Market-Wide
        /// </summary>
        /// <remarks>
        /// This endpoint provides market-wide physical rate data, for all BMUs or a requested set of multiple BMUs.  It returns the data valid for a given settlement period. This includes a snapshot of data valid at the start  of the settlement period, and any changes published during that settlement period.                The settlement period to query can be specified as a date and settlement period, or as a datetime  which will resolve to the settlement period that time falls within.    By default, all of the relevant datasets are returned: RDRE, RURE, RDRI, RURI.                All Dates and DateTimes should be expressed as defined within  &lt;a href&#x3D;\&quot;https://datatracker.ietf.org/doc/html/rfc3339#section-5.6\&quot; target&#x3D;\&quot;_blank\&quot;&gt;RFC 3339&lt;/a&gt;.    Some examples of date parameter combinations are shown below.                Filtering by datetime:                    /balancing/dynamic/rates/all?settlementDate&#x3D;2023-01-18T01:00Z                Filtering by settlement date and period:                    /balancing/dynamic/rates/all?settlementDate&#x3D;2023-01-18&amp;settlementPeriod&#x3D;3
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settlementDate">The settlement date or datetime to filter.</param>
        /// <param name="settlementPeriod">The settlement period to filter. This should be an integer from 1-50 inclusive. (optional)</param>
        /// <param name="bmUnit">The BM Units to query. Elexon or NGC BMU IDs can be used. If omitted, results for all BM units will be returned. (optional)</param>
        /// <param name="dataset">Datasets to return. If omitted, all datasets will be returned. (optional)</param>
        /// <param name="format">Response data format. Use json/xml to include metadata. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicRateData)</returns>
        System.Threading.Tasks.Task<ApiResponse<InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicRateData>> BalancingDynamicRatesAllGetWithHttpInfoAsync(DateTime settlementDate, int? settlementPeriod = default(int?), List<string>? bmUnit = default(List<string>?), List<string>? dataset = default(List<string>?), string? format = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        /// <summary>
        /// Rate Datasets Per-BMU
        /// </summary>
        /// <remarks>
        /// This endpoint provides the physical rate data for a requested BMU.  It returns a \&quot;snapshot\&quot; of data valid at a given time, and optionally a time series of changes over a requested interval.                By default, all of the relevant datasets are returned: RDRE, RURE, RDRI, RURI.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bmUnit">The BM Unit to query.</param>
        /// <param name="snapshotAt">When to retrieve a snapshot of data at.  That is, the latest datapoint before this time will be returned for each dataset.</param>
        /// <param name="until">When to retrieve data until.  Data from the snapshot until this time will be returned. (optional)</param>
        /// <param name="snapshotAtSettlementPeriod">The settlement period to retrieve a snapshot of data at.  If provided, the time part of SnapshotAt will be ignored. (optional)</param>
        /// <param name="untilSettlementPeriod">The settlement period to retrieve data until.  If provided, the time part of Until will be ignored. (optional)</param>
        /// <param name="dataset">Datasets to filter. If empty, all datasets will be returned. (optional)</param>
        /// <param name="format">Response data format. Use json/xml to include metadata. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicRateData</returns>
        System.Threading.Tasks.Task<InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicRateData> BalancingDynamicRatesGetAsync(string bmUnit, DateTime snapshotAt, DateTime? until = default(DateTime?), int? snapshotAtSettlementPeriod = default(int?), int? untilSettlementPeriod = default(int?), List<string>? dataset = default(List<string>?), string? format = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Rate Datasets Per-BMU
        /// </summary>
        /// <remarks>
        /// This endpoint provides the physical rate data for a requested BMU.  It returns a \&quot;snapshot\&quot; of data valid at a given time, and optionally a time series of changes over a requested interval.                By default, all of the relevant datasets are returned: RDRE, RURE, RDRI, RURI.
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bmUnit">The BM Unit to query.</param>
        /// <param name="snapshotAt">When to retrieve a snapshot of data at.  That is, the latest datapoint before this time will be returned for each dataset.</param>
        /// <param name="until">When to retrieve data until.  Data from the snapshot until this time will be returned. (optional)</param>
        /// <param name="snapshotAtSettlementPeriod">The settlement period to retrieve a snapshot of data at.  If provided, the time part of SnapshotAt will be ignored. (optional)</param>
        /// <param name="untilSettlementPeriod">The settlement period to retrieve data until.  If provided, the time part of Until will be ignored. (optional)</param>
        /// <param name="dataset">Datasets to filter. If empty, all datasets will be returned. (optional)</param>
        /// <param name="format">Response data format. Use json/xml to include metadata. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicRateData)</returns>
        System.Threading.Tasks.Task<ApiResponse<InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicRateData>> BalancingDynamicRatesGetWithHttpInfoAsync(string bmUnit, DateTime snapshotAt, DateTime? until = default(DateTime?), int? snapshotAtSettlementPeriod = default(int?), int? untilSettlementPeriod = default(int?), List<string>? dataset = default(List<string>?), string? format = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IBalancingMechanismDynamicApi : IBalancingMechanismDynamicApiSync, IBalancingMechanismDynamicApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class BalancingMechanismDynamicApi : IBalancingMechanismDynamicApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="BalancingMechanismDynamicApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BalancingMechanismDynamicApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BalancingMechanismDynamicApi"/> class.
        /// </summary>
        /// <returns></returns>
        public BalancingMechanismDynamicApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BalancingMechanismDynamicApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public BalancingMechanismDynamicApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="BalancingMechanismDynamicApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public BalancingMechanismDynamicApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Dynamic Datasets Market-wide This endpoint provides the dynamic data for multiple requested BMUs or all BMUs, excluding dynamic rate data.  It returns the data valid for a single settlement period. This includes a snapshot of data valid at the start  of the settlement period, and any changes published during that settlement period.                By default, all of the relevant datasets are returned: SIL, SEL, NDZ, NTB, NTO, MZT, MNZT, MDV &amp; MDP.  The results from each dataset are transformed to a common response model, with the common integer field *Value*  mapped from the fields *Level*, *Period*, *Volume* or *Notice* in the original dataset, as relevant.                The settlement period to query can be specified as a date and settlement period, or as a datetime  which will resolve to the settlement period that time falls within.    All Dates and DateTimes should be expressed as defined within  &lt;a href&#x3D;\&quot;https://datatracker.ietf.org/doc/html/rfc3339#section-5.6\&quot; target&#x3D;\&quot;_blank\&quot;&gt;RFC 3339&lt;/a&gt;.    Some examples of date parameter combinations are shown below.                Filtering by datetime:                    /balancing/dynamic/all?settlementDate&#x3D;2023-01-18T01:00Z                Filtering by settlement date and period:                    /balancing/dynamic/all?settlementDate&#x3D;2023-01-18&amp;settlementPeriod&#x3D;3
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settlementDate">The settlement date or datetime to filter.</param>
        /// <param name="settlementPeriod">The settlement period to filter. This should be an integer from 1-50 inclusive. (optional)</param>
        /// <param name="bmUnit">The BM Units to query. Elexon or NGC BMU IDs can be used. If omitted, results for all BM units will be returned. (optional)</param>
        /// <param name="dataset">Datasets to filter. If omitted, all datasets will be returned. (optional)</param>
        /// <param name="format">Response data format. Use json/xml to include metadata. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicDynamicData</returns>
        public InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicDynamicData BalancingDynamicAllGet(DateTime settlementDate, int? settlementPeriod = default(int?), List<string>? bmUnit = default(List<string>?), List<string>? dataset = default(List<string>?), string? format = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicDynamicData> localVarResponse = BalancingDynamicAllGetWithHttpInfo(settlementDate, settlementPeriod, bmUnit, dataset, format);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Dynamic Datasets Market-wide This endpoint provides the dynamic data for multiple requested BMUs or all BMUs, excluding dynamic rate data.  It returns the data valid for a single settlement period. This includes a snapshot of data valid at the start  of the settlement period, and any changes published during that settlement period.                By default, all of the relevant datasets are returned: SIL, SEL, NDZ, NTB, NTO, MZT, MNZT, MDV &amp; MDP.  The results from each dataset are transformed to a common response model, with the common integer field *Value*  mapped from the fields *Level*, *Period*, *Volume* or *Notice* in the original dataset, as relevant.                The settlement period to query can be specified as a date and settlement period, or as a datetime  which will resolve to the settlement period that time falls within.    All Dates and DateTimes should be expressed as defined within  &lt;a href&#x3D;\&quot;https://datatracker.ietf.org/doc/html/rfc3339#section-5.6\&quot; target&#x3D;\&quot;_blank\&quot;&gt;RFC 3339&lt;/a&gt;.    Some examples of date parameter combinations are shown below.                Filtering by datetime:                    /balancing/dynamic/all?settlementDate&#x3D;2023-01-18T01:00Z                Filtering by settlement date and period:                    /balancing/dynamic/all?settlementDate&#x3D;2023-01-18&amp;settlementPeriod&#x3D;3
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settlementDate">The settlement date or datetime to filter.</param>
        /// <param name="settlementPeriod">The settlement period to filter. This should be an integer from 1-50 inclusive. (optional)</param>
        /// <param name="bmUnit">The BM Units to query. Elexon or NGC BMU IDs can be used. If omitted, results for all BM units will be returned. (optional)</param>
        /// <param name="dataset">Datasets to filter. If omitted, all datasets will be returned. (optional)</param>
        /// <param name="format">Response data format. Use json/xml to include metadata. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicDynamicData</returns>
        public Org.OpenAPITools.Client.ApiResponse<InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicDynamicData> BalancingDynamicAllGetWithHttpInfo(DateTime settlementDate, int? settlementPeriod = default(int?), List<string>? bmUnit = default(List<string>?), List<string>? dataset = default(List<string>?), string? format = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "text/csv"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "settlementDate", settlementDate));
            if (settlementPeriod != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "settlementPeriod", settlementPeriod));
            }
            if (bmUnit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "bmUnit", bmUnit));
            }
            if (dataset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "dataset", dataset));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "BalancingMechanismDynamicApi.BalancingDynamicAllGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicDynamicData>("/balancing/dynamic/all", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BalancingDynamicAllGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dynamic Datasets Market-wide This endpoint provides the dynamic data for multiple requested BMUs or all BMUs, excluding dynamic rate data.  It returns the data valid for a single settlement period. This includes a snapshot of data valid at the start  of the settlement period, and any changes published during that settlement period.                By default, all of the relevant datasets are returned: SIL, SEL, NDZ, NTB, NTO, MZT, MNZT, MDV &amp; MDP.  The results from each dataset are transformed to a common response model, with the common integer field *Value*  mapped from the fields *Level*, *Period*, *Volume* or *Notice* in the original dataset, as relevant.                The settlement period to query can be specified as a date and settlement period, or as a datetime  which will resolve to the settlement period that time falls within.    All Dates and DateTimes should be expressed as defined within  &lt;a href&#x3D;\&quot;https://datatracker.ietf.org/doc/html/rfc3339#section-5.6\&quot; target&#x3D;\&quot;_blank\&quot;&gt;RFC 3339&lt;/a&gt;.    Some examples of date parameter combinations are shown below.                Filtering by datetime:                    /balancing/dynamic/all?settlementDate&#x3D;2023-01-18T01:00Z                Filtering by settlement date and period:                    /balancing/dynamic/all?settlementDate&#x3D;2023-01-18&amp;settlementPeriod&#x3D;3
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settlementDate">The settlement date or datetime to filter.</param>
        /// <param name="settlementPeriod">The settlement period to filter. This should be an integer from 1-50 inclusive. (optional)</param>
        /// <param name="bmUnit">The BM Units to query. Elexon or NGC BMU IDs can be used. If omitted, results for all BM units will be returned. (optional)</param>
        /// <param name="dataset">Datasets to filter. If omitted, all datasets will be returned. (optional)</param>
        /// <param name="format">Response data format. Use json/xml to include metadata. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicDynamicData</returns>
        public async System.Threading.Tasks.Task<InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicDynamicData> BalancingDynamicAllGetAsync(DateTime settlementDate, int? settlementPeriod = default(int?), List<string>? bmUnit = default(List<string>?), List<string>? dataset = default(List<string>?), string? format = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicDynamicData> localVarResponse = await BalancingDynamicAllGetWithHttpInfoAsync(settlementDate, settlementPeriod, bmUnit, dataset, format, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Dynamic Datasets Market-wide This endpoint provides the dynamic data for multiple requested BMUs or all BMUs, excluding dynamic rate data.  It returns the data valid for a single settlement period. This includes a snapshot of data valid at the start  of the settlement period, and any changes published during that settlement period.                By default, all of the relevant datasets are returned: SIL, SEL, NDZ, NTB, NTO, MZT, MNZT, MDV &amp; MDP.  The results from each dataset are transformed to a common response model, with the common integer field *Value*  mapped from the fields *Level*, *Period*, *Volume* or *Notice* in the original dataset, as relevant.                The settlement period to query can be specified as a date and settlement period, or as a datetime  which will resolve to the settlement period that time falls within.    All Dates and DateTimes should be expressed as defined within  &lt;a href&#x3D;\&quot;https://datatracker.ietf.org/doc/html/rfc3339#section-5.6\&quot; target&#x3D;\&quot;_blank\&quot;&gt;RFC 3339&lt;/a&gt;.    Some examples of date parameter combinations are shown below.                Filtering by datetime:                    /balancing/dynamic/all?settlementDate&#x3D;2023-01-18T01:00Z                Filtering by settlement date and period:                    /balancing/dynamic/all?settlementDate&#x3D;2023-01-18&amp;settlementPeriod&#x3D;3
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settlementDate">The settlement date or datetime to filter.</param>
        /// <param name="settlementPeriod">The settlement period to filter. This should be an integer from 1-50 inclusive. (optional)</param>
        /// <param name="bmUnit">The BM Units to query. Elexon or NGC BMU IDs can be used. If omitted, results for all BM units will be returned. (optional)</param>
        /// <param name="dataset">Datasets to filter. If omitted, all datasets will be returned. (optional)</param>
        /// <param name="format">Response data format. Use json/xml to include metadata. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicDynamicData)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicDynamicData>> BalancingDynamicAllGetWithHttpInfoAsync(DateTime settlementDate, int? settlementPeriod = default(int?), List<string>? bmUnit = default(List<string>?), List<string>? dataset = default(List<string>?), string? format = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "text/csv"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "settlementDate", settlementDate));
            if (settlementPeriod != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "settlementPeriod", settlementPeriod));
            }
            if (bmUnit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "bmUnit", bmUnit));
            }
            if (dataset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "dataset", dataset));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "BalancingMechanismDynamicApi.BalancingDynamicAllGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicDynamicData>("/balancing/dynamic/all", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BalancingDynamicAllGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dynamic Datasets Per-BMU This endpoint provides the dynamic data for a requested BMU, excluding physical rate data.  It returns a \&quot;snapshot\&quot; of data valid at a given time, and optionally a time series of changes over a requested interval.                By default, all of the relevant datasets are returned: SIL, SEL, NDZ, NTB, NTO, MZT, MNZT, MDV, MDP.  The results from each dataset are transformed to a common response model, with the common integer field *Value*  mapped from the fields *Level*, *Period*, *Volume* or *Notice* in the original dataset, as relevant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bmUnit">The BM Unit to query.</param>
        /// <param name="snapshotAt">When to retrieve a snapshot of data at.  That is, the latest datapoint before this time will be returned for each dataset.</param>
        /// <param name="until">When to retrieve data until.  Data from the snapshot until this time will be returned. (optional)</param>
        /// <param name="snapshotAtSettlementPeriod">The settlement period to retrieve a snapshot of data at.  If provided, the time part of SnapshotAt will be ignored. (optional)</param>
        /// <param name="untilSettlementPeriod">The settlement period to retrieve data until.  If provided, the time part of Until will be ignored. (optional)</param>
        /// <param name="dataset">Datasets to filter. If omitted, all datasets will be returned. (optional)</param>
        /// <param name="format">Response data format. Use json/xml to include metadata. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicDynamicData</returns>
        public InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicDynamicData BalancingDynamicGet(string bmUnit, DateTime snapshotAt, DateTime? until = default(DateTime?), int? snapshotAtSettlementPeriod = default(int?), int? untilSettlementPeriod = default(int?), List<string>? dataset = default(List<string>?), string? format = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicDynamicData> localVarResponse = BalancingDynamicGetWithHttpInfo(bmUnit, snapshotAt, until, snapshotAtSettlementPeriod, untilSettlementPeriod, dataset, format);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Dynamic Datasets Per-BMU This endpoint provides the dynamic data for a requested BMU, excluding physical rate data.  It returns a \&quot;snapshot\&quot; of data valid at a given time, and optionally a time series of changes over a requested interval.                By default, all of the relevant datasets are returned: SIL, SEL, NDZ, NTB, NTO, MZT, MNZT, MDV, MDP.  The results from each dataset are transformed to a common response model, with the common integer field *Value*  mapped from the fields *Level*, *Period*, *Volume* or *Notice* in the original dataset, as relevant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bmUnit">The BM Unit to query.</param>
        /// <param name="snapshotAt">When to retrieve a snapshot of data at.  That is, the latest datapoint before this time will be returned for each dataset.</param>
        /// <param name="until">When to retrieve data until.  Data from the snapshot until this time will be returned. (optional)</param>
        /// <param name="snapshotAtSettlementPeriod">The settlement period to retrieve a snapshot of data at.  If provided, the time part of SnapshotAt will be ignored. (optional)</param>
        /// <param name="untilSettlementPeriod">The settlement period to retrieve data until.  If provided, the time part of Until will be ignored. (optional)</param>
        /// <param name="dataset">Datasets to filter. If omitted, all datasets will be returned. (optional)</param>
        /// <param name="format">Response data format. Use json/xml to include metadata. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicDynamicData</returns>
        public Org.OpenAPITools.Client.ApiResponse<InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicDynamicData> BalancingDynamicGetWithHttpInfo(string bmUnit, DateTime snapshotAt, DateTime? until = default(DateTime?), int? snapshotAtSettlementPeriod = default(int?), int? untilSettlementPeriod = default(int?), List<string>? dataset = default(List<string>?), string? format = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'bmUnit' is set
            if (bmUnit == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'bmUnit' when calling BalancingMechanismDynamicApi->BalancingDynamicGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "text/csv"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bmUnit", bmUnit));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "snapshotAt", snapshotAt));
            if (until != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "until", until));
            }
            if (snapshotAtSettlementPeriod != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "snapshotAtSettlementPeriod", snapshotAtSettlementPeriod));
            }
            if (untilSettlementPeriod != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "untilSettlementPeriod", untilSettlementPeriod));
            }
            if (dataset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "dataset", dataset));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "BalancingMechanismDynamicApi.BalancingDynamicGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicDynamicData>("/balancing/dynamic", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BalancingDynamicGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Dynamic Datasets Per-BMU This endpoint provides the dynamic data for a requested BMU, excluding physical rate data.  It returns a \&quot;snapshot\&quot; of data valid at a given time, and optionally a time series of changes over a requested interval.                By default, all of the relevant datasets are returned: SIL, SEL, NDZ, NTB, NTO, MZT, MNZT, MDV, MDP.  The results from each dataset are transformed to a common response model, with the common integer field *Value*  mapped from the fields *Level*, *Period*, *Volume* or *Notice* in the original dataset, as relevant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bmUnit">The BM Unit to query.</param>
        /// <param name="snapshotAt">When to retrieve a snapshot of data at.  That is, the latest datapoint before this time will be returned for each dataset.</param>
        /// <param name="until">When to retrieve data until.  Data from the snapshot until this time will be returned. (optional)</param>
        /// <param name="snapshotAtSettlementPeriod">The settlement period to retrieve a snapshot of data at.  If provided, the time part of SnapshotAt will be ignored. (optional)</param>
        /// <param name="untilSettlementPeriod">The settlement period to retrieve data until.  If provided, the time part of Until will be ignored. (optional)</param>
        /// <param name="dataset">Datasets to filter. If omitted, all datasets will be returned. (optional)</param>
        /// <param name="format">Response data format. Use json/xml to include metadata. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicDynamicData</returns>
        public async System.Threading.Tasks.Task<InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicDynamicData> BalancingDynamicGetAsync(string bmUnit, DateTime snapshotAt, DateTime? until = default(DateTime?), int? snapshotAtSettlementPeriod = default(int?), int? untilSettlementPeriod = default(int?), List<string>? dataset = default(List<string>?), string? format = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicDynamicData> localVarResponse = await BalancingDynamicGetWithHttpInfoAsync(bmUnit, snapshotAt, until, snapshotAtSettlementPeriod, untilSettlementPeriod, dataset, format, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Dynamic Datasets Per-BMU This endpoint provides the dynamic data for a requested BMU, excluding physical rate data.  It returns a \&quot;snapshot\&quot; of data valid at a given time, and optionally a time series of changes over a requested interval.                By default, all of the relevant datasets are returned: SIL, SEL, NDZ, NTB, NTO, MZT, MNZT, MDV, MDP.  The results from each dataset are transformed to a common response model, with the common integer field *Value*  mapped from the fields *Level*, *Period*, *Volume* or *Notice* in the original dataset, as relevant.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bmUnit">The BM Unit to query.</param>
        /// <param name="snapshotAt">When to retrieve a snapshot of data at.  That is, the latest datapoint before this time will be returned for each dataset.</param>
        /// <param name="until">When to retrieve data until.  Data from the snapshot until this time will be returned. (optional)</param>
        /// <param name="snapshotAtSettlementPeriod">The settlement period to retrieve a snapshot of data at.  If provided, the time part of SnapshotAt will be ignored. (optional)</param>
        /// <param name="untilSettlementPeriod">The settlement period to retrieve data until.  If provided, the time part of Until will be ignored. (optional)</param>
        /// <param name="dataset">Datasets to filter. If omitted, all datasets will be returned. (optional)</param>
        /// <param name="format">Response data format. Use json/xml to include metadata. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicDynamicData)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicDynamicData>> BalancingDynamicGetWithHttpInfoAsync(string bmUnit, DateTime snapshotAt, DateTime? until = default(DateTime?), int? snapshotAtSettlementPeriod = default(int?), int? untilSettlementPeriod = default(int?), List<string>? dataset = default(List<string>?), string? format = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'bmUnit' is set
            if (bmUnit == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'bmUnit' when calling BalancingMechanismDynamicApi->BalancingDynamicGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "text/csv"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bmUnit", bmUnit));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "snapshotAt", snapshotAt));
            if (until != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "until", until));
            }
            if (snapshotAtSettlementPeriod != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "snapshotAtSettlementPeriod", snapshotAtSettlementPeriod));
            }
            if (untilSettlementPeriod != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "untilSettlementPeriod", untilSettlementPeriod));
            }
            if (dataset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "dataset", dataset));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "BalancingMechanismDynamicApi.BalancingDynamicGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicDynamicData>("/balancing/dynamic", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BalancingDynamicGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rate Datasets Market-Wide This endpoint provides market-wide physical rate data, for all BMUs or a requested set of multiple BMUs.  It returns the data valid for a given settlement period. This includes a snapshot of data valid at the start  of the settlement period, and any changes published during that settlement period.                The settlement period to query can be specified as a date and settlement period, or as a datetime  which will resolve to the settlement period that time falls within.    By default, all of the relevant datasets are returned: RDRE, RURE, RDRI, RURI.                All Dates and DateTimes should be expressed as defined within  &lt;a href&#x3D;\&quot;https://datatracker.ietf.org/doc/html/rfc3339#section-5.6\&quot; target&#x3D;\&quot;_blank\&quot;&gt;RFC 3339&lt;/a&gt;.    Some examples of date parameter combinations are shown below.                Filtering by datetime:                    /balancing/dynamic/rates/all?settlementDate&#x3D;2023-01-18T01:00Z                Filtering by settlement date and period:                    /balancing/dynamic/rates/all?settlementDate&#x3D;2023-01-18&amp;settlementPeriod&#x3D;3
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settlementDate">The settlement date or datetime to filter.</param>
        /// <param name="settlementPeriod">The settlement period to filter. This should be an integer from 1-50 inclusive. (optional)</param>
        /// <param name="bmUnit">The BM Units to query. Elexon or NGC BMU IDs can be used. If omitted, results for all BM units will be returned. (optional)</param>
        /// <param name="dataset">Datasets to return. If omitted, all datasets will be returned. (optional)</param>
        /// <param name="format">Response data format. Use json/xml to include metadata. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicRateData</returns>
        public InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicRateData BalancingDynamicRatesAllGet(DateTime settlementDate, int? settlementPeriod = default(int?), List<string>? bmUnit = default(List<string>?), List<string>? dataset = default(List<string>?), string? format = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicRateData> localVarResponse = BalancingDynamicRatesAllGetWithHttpInfo(settlementDate, settlementPeriod, bmUnit, dataset, format);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Rate Datasets Market-Wide This endpoint provides market-wide physical rate data, for all BMUs or a requested set of multiple BMUs.  It returns the data valid for a given settlement period. This includes a snapshot of data valid at the start  of the settlement period, and any changes published during that settlement period.                The settlement period to query can be specified as a date and settlement period, or as a datetime  which will resolve to the settlement period that time falls within.    By default, all of the relevant datasets are returned: RDRE, RURE, RDRI, RURI.                All Dates and DateTimes should be expressed as defined within  &lt;a href&#x3D;\&quot;https://datatracker.ietf.org/doc/html/rfc3339#section-5.6\&quot; target&#x3D;\&quot;_blank\&quot;&gt;RFC 3339&lt;/a&gt;.    Some examples of date parameter combinations are shown below.                Filtering by datetime:                    /balancing/dynamic/rates/all?settlementDate&#x3D;2023-01-18T01:00Z                Filtering by settlement date and period:                    /balancing/dynamic/rates/all?settlementDate&#x3D;2023-01-18&amp;settlementPeriod&#x3D;3
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settlementDate">The settlement date or datetime to filter.</param>
        /// <param name="settlementPeriod">The settlement period to filter. This should be an integer from 1-50 inclusive. (optional)</param>
        /// <param name="bmUnit">The BM Units to query. Elexon or NGC BMU IDs can be used. If omitted, results for all BM units will be returned. (optional)</param>
        /// <param name="dataset">Datasets to return. If omitted, all datasets will be returned. (optional)</param>
        /// <param name="format">Response data format. Use json/xml to include metadata. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicRateData</returns>
        public Org.OpenAPITools.Client.ApiResponse<InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicRateData> BalancingDynamicRatesAllGetWithHttpInfo(DateTime settlementDate, int? settlementPeriod = default(int?), List<string>? bmUnit = default(List<string>?), List<string>? dataset = default(List<string>?), string? format = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "text/csv"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "settlementDate", settlementDate));
            if (settlementPeriod != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "settlementPeriod", settlementPeriod));
            }
            if (bmUnit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "bmUnit", bmUnit));
            }
            if (dataset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "dataset", dataset));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "BalancingMechanismDynamicApi.BalancingDynamicRatesAllGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicRateData>("/balancing/dynamic/rates/all", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BalancingDynamicRatesAllGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rate Datasets Market-Wide This endpoint provides market-wide physical rate data, for all BMUs or a requested set of multiple BMUs.  It returns the data valid for a given settlement period. This includes a snapshot of data valid at the start  of the settlement period, and any changes published during that settlement period.                The settlement period to query can be specified as a date and settlement period, or as a datetime  which will resolve to the settlement period that time falls within.    By default, all of the relevant datasets are returned: RDRE, RURE, RDRI, RURI.                All Dates and DateTimes should be expressed as defined within  &lt;a href&#x3D;\&quot;https://datatracker.ietf.org/doc/html/rfc3339#section-5.6\&quot; target&#x3D;\&quot;_blank\&quot;&gt;RFC 3339&lt;/a&gt;.    Some examples of date parameter combinations are shown below.                Filtering by datetime:                    /balancing/dynamic/rates/all?settlementDate&#x3D;2023-01-18T01:00Z                Filtering by settlement date and period:                    /balancing/dynamic/rates/all?settlementDate&#x3D;2023-01-18&amp;settlementPeriod&#x3D;3
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settlementDate">The settlement date or datetime to filter.</param>
        /// <param name="settlementPeriod">The settlement period to filter. This should be an integer from 1-50 inclusive. (optional)</param>
        /// <param name="bmUnit">The BM Units to query. Elexon or NGC BMU IDs can be used. If omitted, results for all BM units will be returned. (optional)</param>
        /// <param name="dataset">Datasets to return. If omitted, all datasets will be returned. (optional)</param>
        /// <param name="format">Response data format. Use json/xml to include metadata. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicRateData</returns>
        public async System.Threading.Tasks.Task<InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicRateData> BalancingDynamicRatesAllGetAsync(DateTime settlementDate, int? settlementPeriod = default(int?), List<string>? bmUnit = default(List<string>?), List<string>? dataset = default(List<string>?), string? format = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicRateData> localVarResponse = await BalancingDynamicRatesAllGetWithHttpInfoAsync(settlementDate, settlementPeriod, bmUnit, dataset, format, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Rate Datasets Market-Wide This endpoint provides market-wide physical rate data, for all BMUs or a requested set of multiple BMUs.  It returns the data valid for a given settlement period. This includes a snapshot of data valid at the start  of the settlement period, and any changes published during that settlement period.                The settlement period to query can be specified as a date and settlement period, or as a datetime  which will resolve to the settlement period that time falls within.    By default, all of the relevant datasets are returned: RDRE, RURE, RDRI, RURI.                All Dates and DateTimes should be expressed as defined within  &lt;a href&#x3D;\&quot;https://datatracker.ietf.org/doc/html/rfc3339#section-5.6\&quot; target&#x3D;\&quot;_blank\&quot;&gt;RFC 3339&lt;/a&gt;.    Some examples of date parameter combinations are shown below.                Filtering by datetime:                    /balancing/dynamic/rates/all?settlementDate&#x3D;2023-01-18T01:00Z                Filtering by settlement date and period:                    /balancing/dynamic/rates/all?settlementDate&#x3D;2023-01-18&amp;settlementPeriod&#x3D;3
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="settlementDate">The settlement date or datetime to filter.</param>
        /// <param name="settlementPeriod">The settlement period to filter. This should be an integer from 1-50 inclusive. (optional)</param>
        /// <param name="bmUnit">The BM Units to query. Elexon or NGC BMU IDs can be used. If omitted, results for all BM units will be returned. (optional)</param>
        /// <param name="dataset">Datasets to return. If omitted, all datasets will be returned. (optional)</param>
        /// <param name="format">Response data format. Use json/xml to include metadata. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicRateData)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicRateData>> BalancingDynamicRatesAllGetWithHttpInfoAsync(DateTime settlementDate, int? settlementPeriod = default(int?), List<string>? bmUnit = default(List<string>?), List<string>? dataset = default(List<string>?), string? format = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "text/csv"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "settlementDate", settlementDate));
            if (settlementPeriod != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "settlementPeriod", settlementPeriod));
            }
            if (bmUnit != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "bmUnit", bmUnit));
            }
            if (dataset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "dataset", dataset));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "BalancingMechanismDynamicApi.BalancingDynamicRatesAllGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicRateData>("/balancing/dynamic/rates/all", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BalancingDynamicRatesAllGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rate Datasets Per-BMU This endpoint provides the physical rate data for a requested BMU.  It returns a \&quot;snapshot\&quot; of data valid at a given time, and optionally a time series of changes over a requested interval.                By default, all of the relevant datasets are returned: RDRE, RURE, RDRI, RURI.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bmUnit">The BM Unit to query.</param>
        /// <param name="snapshotAt">When to retrieve a snapshot of data at.  That is, the latest datapoint before this time will be returned for each dataset.</param>
        /// <param name="until">When to retrieve data until.  Data from the snapshot until this time will be returned. (optional)</param>
        /// <param name="snapshotAtSettlementPeriod">The settlement period to retrieve a snapshot of data at.  If provided, the time part of SnapshotAt will be ignored. (optional)</param>
        /// <param name="untilSettlementPeriod">The settlement period to retrieve data until.  If provided, the time part of Until will be ignored. (optional)</param>
        /// <param name="dataset">Datasets to filter. If empty, all datasets will be returned. (optional)</param>
        /// <param name="format">Response data format. Use json/xml to include metadata. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicRateData</returns>
        public InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicRateData BalancingDynamicRatesGet(string bmUnit, DateTime snapshotAt, DateTime? until = default(DateTime?), int? snapshotAtSettlementPeriod = default(int?), int? untilSettlementPeriod = default(int?), List<string>? dataset = default(List<string>?), string? format = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicRateData> localVarResponse = BalancingDynamicRatesGetWithHttpInfo(bmUnit, snapshotAt, until, snapshotAtSettlementPeriod, untilSettlementPeriod, dataset, format);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Rate Datasets Per-BMU This endpoint provides the physical rate data for a requested BMU.  It returns a \&quot;snapshot\&quot; of data valid at a given time, and optionally a time series of changes over a requested interval.                By default, all of the relevant datasets are returned: RDRE, RURE, RDRI, RURI.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bmUnit">The BM Unit to query.</param>
        /// <param name="snapshotAt">When to retrieve a snapshot of data at.  That is, the latest datapoint before this time will be returned for each dataset.</param>
        /// <param name="until">When to retrieve data until.  Data from the snapshot until this time will be returned. (optional)</param>
        /// <param name="snapshotAtSettlementPeriod">The settlement period to retrieve a snapshot of data at.  If provided, the time part of SnapshotAt will be ignored. (optional)</param>
        /// <param name="untilSettlementPeriod">The settlement period to retrieve data until.  If provided, the time part of Until will be ignored. (optional)</param>
        /// <param name="dataset">Datasets to filter. If empty, all datasets will be returned. (optional)</param>
        /// <param name="format">Response data format. Use json/xml to include metadata. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicRateData</returns>
        public Org.OpenAPITools.Client.ApiResponse<InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicRateData> BalancingDynamicRatesGetWithHttpInfo(string bmUnit, DateTime snapshotAt, DateTime? until = default(DateTime?), int? snapshotAtSettlementPeriod = default(int?), int? untilSettlementPeriod = default(int?), List<string>? dataset = default(List<string>?), string? format = default(string?), int operationIndex = 0)
        {
            // verify the required parameter 'bmUnit' is set
            if (bmUnit == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'bmUnit' when calling BalancingMechanismDynamicApi->BalancingDynamicRatesGet");
            }

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "text/csv"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bmUnit", bmUnit));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "snapshotAt", snapshotAt));
            if (until != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "until", until));
            }
            if (snapshotAtSettlementPeriod != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "snapshotAtSettlementPeriod", snapshotAtSettlementPeriod));
            }
            if (untilSettlementPeriod != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "untilSettlementPeriod", untilSettlementPeriod));
            }
            if (dataset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "dataset", dataset));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "BalancingMechanismDynamicApi.BalancingDynamicRatesGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicRateData>("/balancing/dynamic/rates", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BalancingDynamicRatesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Rate Datasets Per-BMU This endpoint provides the physical rate data for a requested BMU.  It returns a \&quot;snapshot\&quot; of data valid at a given time, and optionally a time series of changes over a requested interval.                By default, all of the relevant datasets are returned: RDRE, RURE, RDRI, RURI.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bmUnit">The BM Unit to query.</param>
        /// <param name="snapshotAt">When to retrieve a snapshot of data at.  That is, the latest datapoint before this time will be returned for each dataset.</param>
        /// <param name="until">When to retrieve data until.  Data from the snapshot until this time will be returned. (optional)</param>
        /// <param name="snapshotAtSettlementPeriod">The settlement period to retrieve a snapshot of data at.  If provided, the time part of SnapshotAt will be ignored. (optional)</param>
        /// <param name="untilSettlementPeriod">The settlement period to retrieve data until.  If provided, the time part of Until will be ignored. (optional)</param>
        /// <param name="dataset">Datasets to filter. If empty, all datasets will be returned. (optional)</param>
        /// <param name="format">Response data format. Use json/xml to include metadata. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicRateData</returns>
        public async System.Threading.Tasks.Task<InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicRateData> BalancingDynamicRatesGetAsync(string bmUnit, DateTime snapshotAt, DateTime? until = default(DateTime?), int? snapshotAtSettlementPeriod = default(int?), int? untilSettlementPeriod = default(int?), List<string>? dataset = default(List<string>?), string? format = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicRateData> localVarResponse = await BalancingDynamicRatesGetWithHttpInfoAsync(bmUnit, snapshotAt, until, snapshotAtSettlementPeriod, untilSettlementPeriod, dataset, format, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Rate Datasets Per-BMU This endpoint provides the physical rate data for a requested BMU.  It returns a \&quot;snapshot\&quot; of data valid at a given time, and optionally a time series of changes over a requested interval.                By default, all of the relevant datasets are returned: RDRE, RURE, RDRI, RURI.
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="bmUnit">The BM Unit to query.</param>
        /// <param name="snapshotAt">When to retrieve a snapshot of data at.  That is, the latest datapoint before this time will be returned for each dataset.</param>
        /// <param name="until">When to retrieve data until.  Data from the snapshot until this time will be returned. (optional)</param>
        /// <param name="snapshotAtSettlementPeriod">The settlement period to retrieve a snapshot of data at.  If provided, the time part of SnapshotAt will be ignored. (optional)</param>
        /// <param name="untilSettlementPeriod">The settlement period to retrieve data until.  If provided, the time part of Until will be ignored. (optional)</param>
        /// <param name="dataset">Datasets to filter. If empty, all datasets will be returned. (optional)</param>
        /// <param name="format">Response data format. Use json/xml to include metadata. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicRateData)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicRateData>> BalancingDynamicRatesGetWithHttpInfoAsync(string bmUnit, DateTime snapshotAt, DateTime? until = default(DateTime?), int? snapshotAtSettlementPeriod = default(int?), int? untilSettlementPeriod = default(int?), List<string>? dataset = default(List<string>?), string? format = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            // verify the required parameter 'bmUnit' is set
            if (bmUnit == null)
            {
                throw new Org.OpenAPITools.Client.ApiException(400, "Missing required parameter 'bmUnit' when calling BalancingMechanismDynamicApi->BalancingDynamicRatesGet");
            }


            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "text/csv"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "bmUnit", bmUnit));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "snapshotAt", snapshotAt));
            if (until != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "until", until));
            }
            if (snapshotAtSettlementPeriod != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "snapshotAtSettlementPeriod", snapshotAtSettlementPeriod));
            }
            if (untilSettlementPeriod != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "untilSettlementPeriod", untilSettlementPeriod));
            }
            if (dataset != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "dataset", dataset));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "BalancingMechanismDynamicApi.BalancingDynamicRatesGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingDynamicRateData>("/balancing/dynamic/rates", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BalancingDynamicRatesGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
