/*
 * Insights.Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// InsightsApiModelsResponsesGenerationGenerationByFuelType
    /// </summary>
    [DataContract(Name = "Insights.Api.Models.Responses.Generation.GenerationByFuelType")]
    public partial class InsightsApiModelsResponsesGenerationGenerationByFuelType : IEquatable<InsightsApiModelsResponsesGenerationGenerationByFuelType>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InsightsApiModelsResponsesGenerationGenerationByFuelType" /> class.
        /// </summary>
        /// <param name="fuelType">fuelType.</param>
        /// <param name="currentUsage">currentUsage.</param>
        /// <param name="currentPercentage">currentPercentage.</param>
        /// <param name="halfHourUsage">halfHourUsage.</param>
        /// <param name="halfHourPercentage">halfHourPercentage.</param>
        /// <param name="twentyFourHourUsage">twentyFourHourUsage.</param>
        /// <param name="twentyFourHourPercentage">twentyFourHourPercentage.</param>
        public InsightsApiModelsResponsesGenerationGenerationByFuelType(string fuelType = default(string), long? currentUsage = default(long?), double currentPercentage = default(double), long? halfHourUsage = default(long?), double halfHourPercentage = default(double), long? twentyFourHourUsage = default(long?), double twentyFourHourPercentage = default(double))
        {
            this.FuelType = fuelType;
            this.CurrentUsage = currentUsage;
            this.CurrentPercentage = currentPercentage;
            this.HalfHourUsage = halfHourUsage;
            this.HalfHourPercentage = halfHourPercentage;
            this.TwentyFourHourUsage = twentyFourHourUsage;
            this.TwentyFourHourPercentage = twentyFourHourPercentage;
        }

        /// <summary>
        /// Gets or Sets Dataset
        /// </summary>
        [DataMember(Name = "dataset", EmitDefaultValue = true)]
        public string Dataset { get; private set; }

        /// <summary>
        /// Returns false as Dataset should not be serialized given that it's read-only.
        /// </summary>
        /// <returns>false (boolean)</returns>
        public bool ShouldSerializeDataset()
        {
            return false;
        }
        /// <summary>
        /// Gets or Sets FuelType
        /// </summary>
        [DataMember(Name = "fuelType", EmitDefaultValue = true)]
        public string FuelType { get; set; }

        /// <summary>
        /// Gets or Sets CurrentUsage
        /// </summary>
        [DataMember(Name = "currentUsage", EmitDefaultValue = true)]
        public long? CurrentUsage { get; set; }

        /// <summary>
        /// Gets or Sets CurrentPercentage
        /// </summary>
        [DataMember(Name = "currentPercentage", EmitDefaultValue = false)]
        public double CurrentPercentage { get; set; }

        /// <summary>
        /// Gets or Sets HalfHourUsage
        /// </summary>
        [DataMember(Name = "halfHourUsage", EmitDefaultValue = true)]
        public long? HalfHourUsage { get; set; }

        /// <summary>
        /// Gets or Sets HalfHourPercentage
        /// </summary>
        [DataMember(Name = "halfHourPercentage", EmitDefaultValue = false)]
        public double HalfHourPercentage { get; set; }

        /// <summary>
        /// Gets or Sets TwentyFourHourUsage
        /// </summary>
        [DataMember(Name = "twentyFourHourUsage", EmitDefaultValue = true)]
        public long? TwentyFourHourUsage { get; set; }

        /// <summary>
        /// Gets or Sets TwentyFourHourPercentage
        /// </summary>
        [DataMember(Name = "twentyFourHourPercentage", EmitDefaultValue = false)]
        public double TwentyFourHourPercentage { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InsightsApiModelsResponsesGenerationGenerationByFuelType {\n");
            sb.Append("  Dataset: ").Append(Dataset).Append("\n");
            sb.Append("  FuelType: ").Append(FuelType).Append("\n");
            sb.Append("  CurrentUsage: ").Append(CurrentUsage).Append("\n");
            sb.Append("  CurrentPercentage: ").Append(CurrentPercentage).Append("\n");
            sb.Append("  HalfHourUsage: ").Append(HalfHourUsage).Append("\n");
            sb.Append("  HalfHourPercentage: ").Append(HalfHourPercentage).Append("\n");
            sb.Append("  TwentyFourHourUsage: ").Append(TwentyFourHourUsage).Append("\n");
            sb.Append("  TwentyFourHourPercentage: ").Append(TwentyFourHourPercentage).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InsightsApiModelsResponsesGenerationGenerationByFuelType);
        }

        /// <summary>
        /// Returns true if InsightsApiModelsResponsesGenerationGenerationByFuelType instances are equal
        /// </summary>
        /// <param name="input">Instance of InsightsApiModelsResponsesGenerationGenerationByFuelType to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InsightsApiModelsResponsesGenerationGenerationByFuelType input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Dataset == input.Dataset ||
                    (this.Dataset != null &&
                    this.Dataset.Equals(input.Dataset))
                ) && 
                (
                    this.FuelType == input.FuelType ||
                    (this.FuelType != null &&
                    this.FuelType.Equals(input.FuelType))
                ) && 
                (
                    this.CurrentUsage == input.CurrentUsage ||
                    (this.CurrentUsage != null &&
                    this.CurrentUsage.Equals(input.CurrentUsage))
                ) && 
                (
                    this.CurrentPercentage == input.CurrentPercentage ||
                    this.CurrentPercentage.Equals(input.CurrentPercentage)
                ) && 
                (
                    this.HalfHourUsage == input.HalfHourUsage ||
                    (this.HalfHourUsage != null &&
                    this.HalfHourUsage.Equals(input.HalfHourUsage))
                ) && 
                (
                    this.HalfHourPercentage == input.HalfHourPercentage ||
                    this.HalfHourPercentage.Equals(input.HalfHourPercentage)
                ) && 
                (
                    this.TwentyFourHourUsage == input.TwentyFourHourUsage ||
                    (this.TwentyFourHourUsage != null &&
                    this.TwentyFourHourUsage.Equals(input.TwentyFourHourUsage))
                ) && 
                (
                    this.TwentyFourHourPercentage == input.TwentyFourHourPercentage ||
                    this.TwentyFourHourPercentage.Equals(input.TwentyFourHourPercentage)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Dataset != null)
                {
                    hashCode = (hashCode * 59) + this.Dataset.GetHashCode();
                }
                if (this.FuelType != null)
                {
                    hashCode = (hashCode * 59) + this.FuelType.GetHashCode();
                }
                if (this.CurrentUsage != null)
                {
                    hashCode = (hashCode * 59) + this.CurrentUsage.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.CurrentPercentage.GetHashCode();
                if (this.HalfHourUsage != null)
                {
                    hashCode = (hashCode * 59) + this.HalfHourUsage.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.HalfHourPercentage.GetHashCode();
                if (this.TwentyFourHourUsage != null)
                {
                    hashCode = (hashCode * 59) + this.TwentyFourHourUsage.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.TwentyFourHourPercentage.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
