/*
 * Insights.Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// InsightsApiModelsResponsesTransparencyDatasetRowsAbucDatasetRow
    /// </summary>
    [DataContract(Name = "Insights.Api.Models.Responses.Transparency.DatasetRows.AbucDatasetRow")]
    public partial class InsightsApiModelsResponsesTransparencyDatasetRowsAbucDatasetRow : IEquatable<InsightsApiModelsResponsesTransparencyDatasetRowsAbucDatasetRow>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InsightsApiModelsResponsesTransparencyDatasetRowsAbucDatasetRow" /> class.
        /// </summary>
        /// <param name="dataset">dataset.</param>
        /// <param name="documentId">documentId.</param>
        /// <param name="documentRevisionNumber">documentRevisionNumber.</param>
        /// <param name="publishTime">publishTime.</param>
        /// <param name="businessType">businessType.</param>
        /// <param name="psrType">psrType.</param>
        /// <param name="marketAgreementType">marketAgreementType.</param>
        /// <param name="flowDirection">flowDirection.</param>
        /// <param name="settlementDate">settlementDate.</param>
        /// <param name="quantity">quantity.</param>
        public InsightsApiModelsResponsesTransparencyDatasetRowsAbucDatasetRow(string dataset = default(string), string documentId = default(string), int documentRevisionNumber = default(int), DateTime publishTime = default(DateTime), string businessType = default(string), string psrType = default(string), string marketAgreementType = default(string), string flowDirection = default(string), DateTime settlementDate = default(DateTime), double quantity = default(double))
        {
            this.Dataset = dataset;
            this.DocumentId = documentId;
            this.DocumentRevisionNumber = documentRevisionNumber;
            this.PublishTime = publishTime;
            this.BusinessType = businessType;
            this.PsrType = psrType;
            this.MarketAgreementType = marketAgreementType;
            this.FlowDirection = flowDirection;
            this.SettlementDate = settlementDate;
            this.Quantity = quantity;
        }

        /// <summary>
        /// Gets or Sets Dataset
        /// </summary>
        /// <example>ABUC</example>
        [DataMember(Name = "dataset", EmitDefaultValue = true)]
        public string Dataset { get; set; }

        /// <summary>
        /// Gets or Sets DocumentId
        /// </summary>
        /// <example>NGET-EMFIP-ABUC-00688983</example>
        [DataMember(Name = "documentId", EmitDefaultValue = true)]
        public string DocumentId { get; set; }

        /// <summary>
        /// Gets or Sets DocumentRevisionNumber
        /// </summary>
        /// <example>1</example>
        [DataMember(Name = "documentRevisionNumber", EmitDefaultValue = false)]
        public int DocumentRevisionNumber { get; set; }

        /// <summary>
        /// Gets or Sets PublishTime
        /// </summary>
        /// <example>2023-08-22T07:43:04Z</example>
        [DataMember(Name = "publishTime", EmitDefaultValue = false)]
        public DateTime PublishTime { get; set; }

        /// <summary>
        /// Gets or Sets BusinessType
        /// </summary>
        /// <example>Replacement reserve</example>
        [DataMember(Name = "businessType", EmitDefaultValue = true)]
        public string BusinessType { get; set; }

        /// <summary>
        /// Gets or Sets PsrType
        /// </summary>
        /// <example>Generation</example>
        [DataMember(Name = "psrType", EmitDefaultValue = true)]
        public string PsrType { get; set; }

        /// <summary>
        /// Gets or Sets MarketAgreementType
        /// </summary>
        /// <example>Daily</example>
        [DataMember(Name = "marketAgreementType", EmitDefaultValue = true)]
        public string MarketAgreementType { get; set; }

        /// <summary>
        /// Gets or Sets FlowDirection
        /// </summary>
        /// <example>Up</example>
        [DataMember(Name = "flowDirection", EmitDefaultValue = true)]
        public string FlowDirection { get; set; }

        /// <summary>
        /// Gets or Sets SettlementDate
        /// </summary>
        /// <example>Wed Aug 23 02:00:00 CEST 2023</example>
        [DataMember(Name = "settlementDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime SettlementDate { get; set; }

        /// <summary>
        /// Gets or Sets Quantity
        /// </summary>
        /// <example>1140</example>
        [DataMember(Name = "quantity", EmitDefaultValue = false)]
        public double Quantity { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InsightsApiModelsResponsesTransparencyDatasetRowsAbucDatasetRow {\n");
            sb.Append("  Dataset: ").Append(Dataset).Append("\n");
            sb.Append("  DocumentId: ").Append(DocumentId).Append("\n");
            sb.Append("  DocumentRevisionNumber: ").Append(DocumentRevisionNumber).Append("\n");
            sb.Append("  PublishTime: ").Append(PublishTime).Append("\n");
            sb.Append("  BusinessType: ").Append(BusinessType).Append("\n");
            sb.Append("  PsrType: ").Append(PsrType).Append("\n");
            sb.Append("  MarketAgreementType: ").Append(MarketAgreementType).Append("\n");
            sb.Append("  FlowDirection: ").Append(FlowDirection).Append("\n");
            sb.Append("  SettlementDate: ").Append(SettlementDate).Append("\n");
            sb.Append("  Quantity: ").Append(Quantity).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InsightsApiModelsResponsesTransparencyDatasetRowsAbucDatasetRow);
        }

        /// <summary>
        /// Returns true if InsightsApiModelsResponsesTransparencyDatasetRowsAbucDatasetRow instances are equal
        /// </summary>
        /// <param name="input">Instance of InsightsApiModelsResponsesTransparencyDatasetRowsAbucDatasetRow to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InsightsApiModelsResponsesTransparencyDatasetRowsAbucDatasetRow input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Dataset == input.Dataset ||
                    (this.Dataset != null &&
                    this.Dataset.Equals(input.Dataset))
                ) && 
                (
                    this.DocumentId == input.DocumentId ||
                    (this.DocumentId != null &&
                    this.DocumentId.Equals(input.DocumentId))
                ) && 
                (
                    this.DocumentRevisionNumber == input.DocumentRevisionNumber ||
                    this.DocumentRevisionNumber.Equals(input.DocumentRevisionNumber)
                ) && 
                (
                    this.PublishTime == input.PublishTime ||
                    (this.PublishTime != null &&
                    this.PublishTime.Equals(input.PublishTime))
                ) && 
                (
                    this.BusinessType == input.BusinessType ||
                    (this.BusinessType != null &&
                    this.BusinessType.Equals(input.BusinessType))
                ) && 
                (
                    this.PsrType == input.PsrType ||
                    (this.PsrType != null &&
                    this.PsrType.Equals(input.PsrType))
                ) && 
                (
                    this.MarketAgreementType == input.MarketAgreementType ||
                    (this.MarketAgreementType != null &&
                    this.MarketAgreementType.Equals(input.MarketAgreementType))
                ) && 
                (
                    this.FlowDirection == input.FlowDirection ||
                    (this.FlowDirection != null &&
                    this.FlowDirection.Equals(input.FlowDirection))
                ) && 
                (
                    this.SettlementDate == input.SettlementDate ||
                    (this.SettlementDate != null &&
                    this.SettlementDate.Equals(input.SettlementDate))
                ) && 
                (
                    this.Quantity == input.Quantity ||
                    this.Quantity.Equals(input.Quantity)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Dataset != null)
                {
                    hashCode = (hashCode * 59) + this.Dataset.GetHashCode();
                }
                if (this.DocumentId != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DocumentRevisionNumber.GetHashCode();
                if (this.PublishTime != null)
                {
                    hashCode = (hashCode * 59) + this.PublishTime.GetHashCode();
                }
                if (this.BusinessType != null)
                {
                    hashCode = (hashCode * 59) + this.BusinessType.GetHashCode();
                }
                if (this.PsrType != null)
                {
                    hashCode = (hashCode * 59) + this.PsrType.GetHashCode();
                }
                if (this.MarketAgreementType != null)
                {
                    hashCode = (hashCode * 59) + this.MarketAgreementType.GetHashCode();
                }
                if (this.FlowDirection != null)
                {
                    hashCode = (hashCode * 59) + this.FlowDirection.GetHashCode();
                }
                if (this.SettlementDate != null)
                {
                    hashCode = (hashCode * 59) + this.SettlementDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Quantity.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
