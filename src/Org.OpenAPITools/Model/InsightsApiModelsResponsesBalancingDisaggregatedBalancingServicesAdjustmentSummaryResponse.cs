/*
 * Insights.Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse
    /// </summary>
    [DataContract(Name = "Insights.Api.Models.Responses.Balancing.DisaggregatedBalancingServicesAdjustmentSummaryResponse")]
    public partial class InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse : IEquatable<InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse" /> class.
        /// </summary>
        /// <param name="settlementDate">settlementDate.</param>
        /// <param name="settlementPeriod">settlementPeriod.</param>
        /// <param name="startTime">startTime.</param>
        /// <param name="buyActionCount">buyActionCount.</param>
        /// <param name="sellActionCount">sellActionCount.</param>
        /// <param name="buyPriceMinimum">buyPriceMinimum.</param>
        /// <param name="buyPriceMaximum">buyPriceMaximum.</param>
        /// <param name="buyPriceAverage">buyPriceAverage.</param>
        /// <param name="sellPriceMinimum">sellPriceMinimum.</param>
        /// <param name="sellPriceMaximum">sellPriceMaximum.</param>
        /// <param name="sellPriceAverage">sellPriceAverage.</param>
        /// <param name="buyVolumeTotal">buyVolumeTotal.</param>
        /// <param name="sellVolumeTotal">sellVolumeTotal.</param>
        /// <param name="netVolume">netVolume.</param>
        public InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse(DateTime settlementDate = default(DateTime), int settlementPeriod = default(int), DateTime startTime = default(DateTime), int buyActionCount = default(int), int sellActionCount = default(int), double? buyPriceMinimum = default(double?), double? buyPriceMaximum = default(double?), double? buyPriceAverage = default(double?), double? sellPriceMinimum = default(double?), double? sellPriceMaximum = default(double?), double? sellPriceAverage = default(double?), double? buyVolumeTotal = default(double?), double? sellVolumeTotal = default(double?), double? netVolume = default(double?))
        {
            this.SettlementDate = settlementDate;
            this.SettlementPeriod = settlementPeriod;
            this.StartTime = startTime;
            this.BuyActionCount = buyActionCount;
            this.SellActionCount = sellActionCount;
            this.BuyPriceMinimum = buyPriceMinimum;
            this.BuyPriceMaximum = buyPriceMaximum;
            this.BuyPriceAverage = buyPriceAverage;
            this.SellPriceMinimum = sellPriceMinimum;
            this.SellPriceMaximum = sellPriceMaximum;
            this.SellPriceAverage = sellPriceAverage;
            this.BuyVolumeTotal = buyVolumeTotal;
            this.SellVolumeTotal = sellVolumeTotal;
            this.NetVolume = netVolume;
        }

        /// <summary>
        /// Gets or Sets SettlementDate
        /// </summary>
        /// <example>Mon Sep 26 02:00:00 CEST 2022</example>
        [DataMember(Name = "settlementDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime SettlementDate { get; set; }

        /// <summary>
        /// Gets or Sets SettlementPeriod
        /// </summary>
        /// <example>27</example>
        [DataMember(Name = "settlementPeriod", EmitDefaultValue = false)]
        public int SettlementPeriod { get; set; }

        /// <summary>
        /// Gets or Sets StartTime
        /// </summary>
        /// <example>2022-09-26T13:00Z</example>
        [DataMember(Name = "startTime", EmitDefaultValue = false)]
        public DateTime StartTime { get; set; }

        /// <summary>
        /// Gets or Sets BuyActionCount
        /// </summary>
        /// <example>2</example>
        [DataMember(Name = "buyActionCount", EmitDefaultValue = false)]
        public int BuyActionCount { get; set; }

        /// <summary>
        /// Gets or Sets SellActionCount
        /// </summary>
        /// <example>2</example>
        [DataMember(Name = "sellActionCount", EmitDefaultValue = false)]
        public int SellActionCount { get; set; }

        /// <summary>
        /// Gets or Sets BuyPriceMinimum
        /// </summary>
        /// <example>10.23</example>
        [DataMember(Name = "buyPriceMinimum", EmitDefaultValue = true)]
        public double? BuyPriceMinimum { get; set; }

        /// <summary>
        /// Gets or Sets BuyPriceMaximum
        /// </summary>
        /// <example>30.45</example>
        [DataMember(Name = "buyPriceMaximum", EmitDefaultValue = true)]
        public double? BuyPriceMaximum { get; set; }

        /// <summary>
        /// Gets or Sets BuyPriceAverage
        /// </summary>
        /// <example>20.34</example>
        [DataMember(Name = "buyPriceAverage", EmitDefaultValue = true)]
        public double? BuyPriceAverage { get; set; }

        /// <summary>
        /// Gets or Sets SellPriceMinimum
        /// </summary>
        /// <example>1.23</example>
        [DataMember(Name = "sellPriceMinimum", EmitDefaultValue = true)]
        public double? SellPriceMinimum { get; set; }

        /// <summary>
        /// Gets or Sets SellPriceMaximum
        /// </summary>
        /// <example>3.45</example>
        [DataMember(Name = "sellPriceMaximum", EmitDefaultValue = true)]
        public double? SellPriceMaximum { get; set; }

        /// <summary>
        /// Gets or Sets SellPriceAverage
        /// </summary>
        /// <example>2.34</example>
        [DataMember(Name = "sellPriceAverage", EmitDefaultValue = true)]
        public double? SellPriceAverage { get; set; }

        /// <summary>
        /// Gets or Sets BuyVolumeTotal
        /// </summary>
        /// <example>40.68</example>
        [DataMember(Name = "buyVolumeTotal", EmitDefaultValue = true)]
        public double? BuyVolumeTotal { get; set; }

        /// <summary>
        /// Gets or Sets SellVolumeTotal
        /// </summary>
        /// <example>4.68</example>
        [DataMember(Name = "sellVolumeTotal", EmitDefaultValue = true)]
        public double? SellVolumeTotal { get; set; }

        /// <summary>
        /// Gets or Sets NetVolume
        /// </summary>
        /// <example>36</example>
        [DataMember(Name = "netVolume", EmitDefaultValue = true)]
        public double? NetVolume { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse {\n");
            sb.Append("  SettlementDate: ").Append(SettlementDate).Append("\n");
            sb.Append("  SettlementPeriod: ").Append(SettlementPeriod).Append("\n");
            sb.Append("  StartTime: ").Append(StartTime).Append("\n");
            sb.Append("  BuyActionCount: ").Append(BuyActionCount).Append("\n");
            sb.Append("  SellActionCount: ").Append(SellActionCount).Append("\n");
            sb.Append("  BuyPriceMinimum: ").Append(BuyPriceMinimum).Append("\n");
            sb.Append("  BuyPriceMaximum: ").Append(BuyPriceMaximum).Append("\n");
            sb.Append("  BuyPriceAverage: ").Append(BuyPriceAverage).Append("\n");
            sb.Append("  SellPriceMinimum: ").Append(SellPriceMinimum).Append("\n");
            sb.Append("  SellPriceMaximum: ").Append(SellPriceMaximum).Append("\n");
            sb.Append("  SellPriceAverage: ").Append(SellPriceAverage).Append("\n");
            sb.Append("  BuyVolumeTotal: ").Append(BuyVolumeTotal).Append("\n");
            sb.Append("  SellVolumeTotal: ").Append(SellVolumeTotal).Append("\n");
            sb.Append("  NetVolume: ").Append(NetVolume).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse);
        }

        /// <summary>
        /// Returns true if InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse instances are equal
        /// </summary>
        /// <param name="input">Instance of InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InsightsApiModelsResponsesBalancingDisaggregatedBalancingServicesAdjustmentSummaryResponse input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.SettlementDate == input.SettlementDate ||
                    (this.SettlementDate != null &&
                    this.SettlementDate.Equals(input.SettlementDate))
                ) && 
                (
                    this.SettlementPeriod == input.SettlementPeriod ||
                    this.SettlementPeriod.Equals(input.SettlementPeriod)
                ) && 
                (
                    this.StartTime == input.StartTime ||
                    (this.StartTime != null &&
                    this.StartTime.Equals(input.StartTime))
                ) && 
                (
                    this.BuyActionCount == input.BuyActionCount ||
                    this.BuyActionCount.Equals(input.BuyActionCount)
                ) && 
                (
                    this.SellActionCount == input.SellActionCount ||
                    this.SellActionCount.Equals(input.SellActionCount)
                ) && 
                (
                    this.BuyPriceMinimum == input.BuyPriceMinimum ||
                    (this.BuyPriceMinimum != null &&
                    this.BuyPriceMinimum.Equals(input.BuyPriceMinimum))
                ) && 
                (
                    this.BuyPriceMaximum == input.BuyPriceMaximum ||
                    (this.BuyPriceMaximum != null &&
                    this.BuyPriceMaximum.Equals(input.BuyPriceMaximum))
                ) && 
                (
                    this.BuyPriceAverage == input.BuyPriceAverage ||
                    (this.BuyPriceAverage != null &&
                    this.BuyPriceAverage.Equals(input.BuyPriceAverage))
                ) && 
                (
                    this.SellPriceMinimum == input.SellPriceMinimum ||
                    (this.SellPriceMinimum != null &&
                    this.SellPriceMinimum.Equals(input.SellPriceMinimum))
                ) && 
                (
                    this.SellPriceMaximum == input.SellPriceMaximum ||
                    (this.SellPriceMaximum != null &&
                    this.SellPriceMaximum.Equals(input.SellPriceMaximum))
                ) && 
                (
                    this.SellPriceAverage == input.SellPriceAverage ||
                    (this.SellPriceAverage != null &&
                    this.SellPriceAverage.Equals(input.SellPriceAverage))
                ) && 
                (
                    this.BuyVolumeTotal == input.BuyVolumeTotal ||
                    (this.BuyVolumeTotal != null &&
                    this.BuyVolumeTotal.Equals(input.BuyVolumeTotal))
                ) && 
                (
                    this.SellVolumeTotal == input.SellVolumeTotal ||
                    (this.SellVolumeTotal != null &&
                    this.SellVolumeTotal.Equals(input.SellVolumeTotal))
                ) && 
                (
                    this.NetVolume == input.NetVolume ||
                    (this.NetVolume != null &&
                    this.NetVolume.Equals(input.NetVolume))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.SettlementDate != null)
                {
                    hashCode = (hashCode * 59) + this.SettlementDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.SettlementPeriod.GetHashCode();
                if (this.StartTime != null)
                {
                    hashCode = (hashCode * 59) + this.StartTime.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.BuyActionCount.GetHashCode();
                hashCode = (hashCode * 59) + this.SellActionCount.GetHashCode();
                if (this.BuyPriceMinimum != null)
                {
                    hashCode = (hashCode * 59) + this.BuyPriceMinimum.GetHashCode();
                }
                if (this.BuyPriceMaximum != null)
                {
                    hashCode = (hashCode * 59) + this.BuyPriceMaximum.GetHashCode();
                }
                if (this.BuyPriceAverage != null)
                {
                    hashCode = (hashCode * 59) + this.BuyPriceAverage.GetHashCode();
                }
                if (this.SellPriceMinimum != null)
                {
                    hashCode = (hashCode * 59) + this.SellPriceMinimum.GetHashCode();
                }
                if (this.SellPriceMaximum != null)
                {
                    hashCode = (hashCode * 59) + this.SellPriceMaximum.GetHashCode();
                }
                if (this.SellPriceAverage != null)
                {
                    hashCode = (hashCode * 59) + this.SellPriceAverage.GetHashCode();
                }
                if (this.BuyVolumeTotal != null)
                {
                    hashCode = (hashCode * 59) + this.BuyVolumeTotal.GetHashCode();
                }
                if (this.SellVolumeTotal != null)
                {
                    hashCode = (hashCode * 59) + this.SellVolumeTotal.GetHashCode();
                }
                if (this.NetVolume != null)
                {
                    hashCode = (hashCode * 59) + this.NetVolume.GetHashCode();
                }
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
