/*
 * Insights.Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Net.Mime;
using Org.OpenAPITools.Client;
using Org.OpenAPITools.Model;

namespace Org.OpenAPITools.Api
{

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMarketIndexApiSync : IApiAccessor
    {
        #region Synchronous Operations
        /// <summary>
        /// Market Index Data (MID) price time series
        /// </summary>
        /// <remarks>
        /// This endpoint provides Market Index Data received from NGESO.                Market Index Data is a key component in the calculation of System Buy Price and System Sell Price for each  Settlement Period. This data is received from each of the appointed Market Index Data Providers (MIDPs) and  reflects the price of wholesale electricity in Great Britain in the short term markets. The Market Index Data  which is received from each MIDP for each Settlement Period consists of a Market Index Volume and  Market Index Price, representing the volume and price of trading for the relevant period in the market operated  by the MIDP. The Market Price (the volume weighed average Market Index Price) is used to derive  the Reverse Price (SBP or SSP).\&quot;                The two data providers available to query are N2EX (\&quot;N2EXMIDP\&quot;) and APX (\&quot;APXMIDP\&quot;).    By default, the from and to parameters filter the data by time inclusively. If the settlementPeriodFrom or  settlementPeriodTo parameters are provided, the corresponding from or to parameter instead filters on settlement  date, allowing for searching by a combination of time and/or settlement date &amp; settlement period.  Note: When filtering via settlement date, from/to are treated as Dates only, with the time being ignored. For  example, 2022-06-01T00:00Z and 2022-06-01T11:11Z are both treated as the settlement date 2022-06-01.                All Dates and DateTimes should be expressed as defined within  &lt;a href&#x3D;\&quot;https://datatracker.ietf.org/doc/html/rfc3339#section-5.6\&quot; target&#x3D;\&quot;_blank\&quot;&gt;RFC 3339&lt;/a&gt;.                Some examples of date parameter combinations are shown below.                Filtering from start time to start time:                    /balancing/pricing/market-index?from&#x3D;2022-06-01T00:00Z&amp;to&#x3D;2022-07-01T00:00Z                Filtering from start time to settlement date and period:                    /balancing/pricing/market-index?from&#x3D;2022-06-01T00:00Z&amp;to&#x3D;2022-07-01T00:00Z&amp;settlementPeriodTo&#x3D;1                Filtering from settlement date and period to start time:                    /balancing/pricing/market-index?from&#x3D;2022-06-01T00:00Z&amp;to&#x3D;2022-07-01T00:00Z&amp;settlementPeriodFrom&#x3D;1                Filtering from settlement date and period to settlement date and period:                    /balancing/pricing/market-index?from&#x3D;2022-06-01T00:00Z&amp;to&#x3D;2022-07-01T00:00Z&amp;settlementPeriodFrom&#x3D;1&amp;settlementPeriodTo&#x3D;1
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The \&quot;from\&quot; start time or settlement date for the filter.</param>
        /// <param name="to">The \&quot;to\&quot; start time or settlement date for the filter.</param>
        /// <param name="settlementPeriodFrom">The \&quot;from\&quot; settlement period for the filter. This should be an integer from 1-50 inclusive. (optional)</param>
        /// <param name="settlementPeriodTo">The \&quot;to\&quot; settlement period for the filter. This should be an integer from 1-50 inclusive. (optional)</param>
        /// <param name="dataProviders">The data providers to query. If no data provider is selected both will be displayed. (optional)</param>
        /// <param name="format">Response data format. Use json/xml to include metadata. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingMarketIndexResponse</returns>
        InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingMarketIndexResponse BalancingPricingMarketIndexGet(DateTime from, DateTime to, int? settlementPeriodFrom = default(int?), int? settlementPeriodTo = default(int?), List<string>? dataProviders = default(List<string>?), string? format = default(string?), int operationIndex = 0);

        /// <summary>
        /// Market Index Data (MID) price time series
        /// </summary>
        /// <remarks>
        /// This endpoint provides Market Index Data received from NGESO.                Market Index Data is a key component in the calculation of System Buy Price and System Sell Price for each  Settlement Period. This data is received from each of the appointed Market Index Data Providers (MIDPs) and  reflects the price of wholesale electricity in Great Britain in the short term markets. The Market Index Data  which is received from each MIDP for each Settlement Period consists of a Market Index Volume and  Market Index Price, representing the volume and price of trading for the relevant period in the market operated  by the MIDP. The Market Price (the volume weighed average Market Index Price) is used to derive  the Reverse Price (SBP or SSP).\&quot;                The two data providers available to query are N2EX (\&quot;N2EXMIDP\&quot;) and APX (\&quot;APXMIDP\&quot;).    By default, the from and to parameters filter the data by time inclusively. If the settlementPeriodFrom or  settlementPeriodTo parameters are provided, the corresponding from or to parameter instead filters on settlement  date, allowing for searching by a combination of time and/or settlement date &amp; settlement period.  Note: When filtering via settlement date, from/to are treated as Dates only, with the time being ignored. For  example, 2022-06-01T00:00Z and 2022-06-01T11:11Z are both treated as the settlement date 2022-06-01.                All Dates and DateTimes should be expressed as defined within  &lt;a href&#x3D;\&quot;https://datatracker.ietf.org/doc/html/rfc3339#section-5.6\&quot; target&#x3D;\&quot;_blank\&quot;&gt;RFC 3339&lt;/a&gt;.                Some examples of date parameter combinations are shown below.                Filtering from start time to start time:                    /balancing/pricing/market-index?from&#x3D;2022-06-01T00:00Z&amp;to&#x3D;2022-07-01T00:00Z                Filtering from start time to settlement date and period:                    /balancing/pricing/market-index?from&#x3D;2022-06-01T00:00Z&amp;to&#x3D;2022-07-01T00:00Z&amp;settlementPeriodTo&#x3D;1                Filtering from settlement date and period to start time:                    /balancing/pricing/market-index?from&#x3D;2022-06-01T00:00Z&amp;to&#x3D;2022-07-01T00:00Z&amp;settlementPeriodFrom&#x3D;1                Filtering from settlement date and period to settlement date and period:                    /balancing/pricing/market-index?from&#x3D;2022-06-01T00:00Z&amp;to&#x3D;2022-07-01T00:00Z&amp;settlementPeriodFrom&#x3D;1&amp;settlementPeriodTo&#x3D;1
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The \&quot;from\&quot; start time or settlement date for the filter.</param>
        /// <param name="to">The \&quot;to\&quot; start time or settlement date for the filter.</param>
        /// <param name="settlementPeriodFrom">The \&quot;from\&quot; settlement period for the filter. This should be an integer from 1-50 inclusive. (optional)</param>
        /// <param name="settlementPeriodTo">The \&quot;to\&quot; settlement period for the filter. This should be an integer from 1-50 inclusive. (optional)</param>
        /// <param name="dataProviders">The data providers to query. If no data provider is selected both will be displayed. (optional)</param>
        /// <param name="format">Response data format. Use json/xml to include metadata. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingMarketIndexResponse</returns>
        ApiResponse<InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingMarketIndexResponse> BalancingPricingMarketIndexGetWithHttpInfo(DateTime from, DateTime to, int? settlementPeriodFrom = default(int?), int? settlementPeriodTo = default(int?), List<string>? dataProviders = default(List<string>?), string? format = default(string?), int operationIndex = 0);
        #endregion Synchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMarketIndexApiAsync : IApiAccessor
    {
        #region Asynchronous Operations
        /// <summary>
        /// Market Index Data (MID) price time series
        /// </summary>
        /// <remarks>
        /// This endpoint provides Market Index Data received from NGESO.                Market Index Data is a key component in the calculation of System Buy Price and System Sell Price for each  Settlement Period. This data is received from each of the appointed Market Index Data Providers (MIDPs) and  reflects the price of wholesale electricity in Great Britain in the short term markets. The Market Index Data  which is received from each MIDP for each Settlement Period consists of a Market Index Volume and  Market Index Price, representing the volume and price of trading for the relevant period in the market operated  by the MIDP. The Market Price (the volume weighed average Market Index Price) is used to derive  the Reverse Price (SBP or SSP).\&quot;                The two data providers available to query are N2EX (\&quot;N2EXMIDP\&quot;) and APX (\&quot;APXMIDP\&quot;).    By default, the from and to parameters filter the data by time inclusively. If the settlementPeriodFrom or  settlementPeriodTo parameters are provided, the corresponding from or to parameter instead filters on settlement  date, allowing for searching by a combination of time and/or settlement date &amp; settlement period.  Note: When filtering via settlement date, from/to are treated as Dates only, with the time being ignored. For  example, 2022-06-01T00:00Z and 2022-06-01T11:11Z are both treated as the settlement date 2022-06-01.                All Dates and DateTimes should be expressed as defined within  &lt;a href&#x3D;\&quot;https://datatracker.ietf.org/doc/html/rfc3339#section-5.6\&quot; target&#x3D;\&quot;_blank\&quot;&gt;RFC 3339&lt;/a&gt;.                Some examples of date parameter combinations are shown below.                Filtering from start time to start time:                    /balancing/pricing/market-index?from&#x3D;2022-06-01T00:00Z&amp;to&#x3D;2022-07-01T00:00Z                Filtering from start time to settlement date and period:                    /balancing/pricing/market-index?from&#x3D;2022-06-01T00:00Z&amp;to&#x3D;2022-07-01T00:00Z&amp;settlementPeriodTo&#x3D;1                Filtering from settlement date and period to start time:                    /balancing/pricing/market-index?from&#x3D;2022-06-01T00:00Z&amp;to&#x3D;2022-07-01T00:00Z&amp;settlementPeriodFrom&#x3D;1                Filtering from settlement date and period to settlement date and period:                    /balancing/pricing/market-index?from&#x3D;2022-06-01T00:00Z&amp;to&#x3D;2022-07-01T00:00Z&amp;settlementPeriodFrom&#x3D;1&amp;settlementPeriodTo&#x3D;1
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The \&quot;from\&quot; start time or settlement date for the filter.</param>
        /// <param name="to">The \&quot;to\&quot; start time or settlement date for the filter.</param>
        /// <param name="settlementPeriodFrom">The \&quot;from\&quot; settlement period for the filter. This should be an integer from 1-50 inclusive. (optional)</param>
        /// <param name="settlementPeriodTo">The \&quot;to\&quot; settlement period for the filter. This should be an integer from 1-50 inclusive. (optional)</param>
        /// <param name="dataProviders">The data providers to query. If no data provider is selected both will be displayed. (optional)</param>
        /// <param name="format">Response data format. Use json/xml to include metadata. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingMarketIndexResponse</returns>
        System.Threading.Tasks.Task<InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingMarketIndexResponse> BalancingPricingMarketIndexGetAsync(DateTime from, DateTime to, int? settlementPeriodFrom = default(int?), int? settlementPeriodTo = default(int?), List<string>? dataProviders = default(List<string>?), string? format = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));

        /// <summary>
        /// Market Index Data (MID) price time series
        /// </summary>
        /// <remarks>
        /// This endpoint provides Market Index Data received from NGESO.                Market Index Data is a key component in the calculation of System Buy Price and System Sell Price for each  Settlement Period. This data is received from each of the appointed Market Index Data Providers (MIDPs) and  reflects the price of wholesale electricity in Great Britain in the short term markets. The Market Index Data  which is received from each MIDP for each Settlement Period consists of a Market Index Volume and  Market Index Price, representing the volume and price of trading for the relevant period in the market operated  by the MIDP. The Market Price (the volume weighed average Market Index Price) is used to derive  the Reverse Price (SBP or SSP).\&quot;                The two data providers available to query are N2EX (\&quot;N2EXMIDP\&quot;) and APX (\&quot;APXMIDP\&quot;).    By default, the from and to parameters filter the data by time inclusively. If the settlementPeriodFrom or  settlementPeriodTo parameters are provided, the corresponding from or to parameter instead filters on settlement  date, allowing for searching by a combination of time and/or settlement date &amp; settlement period.  Note: When filtering via settlement date, from/to are treated as Dates only, with the time being ignored. For  example, 2022-06-01T00:00Z and 2022-06-01T11:11Z are both treated as the settlement date 2022-06-01.                All Dates and DateTimes should be expressed as defined within  &lt;a href&#x3D;\&quot;https://datatracker.ietf.org/doc/html/rfc3339#section-5.6\&quot; target&#x3D;\&quot;_blank\&quot;&gt;RFC 3339&lt;/a&gt;.                Some examples of date parameter combinations are shown below.                Filtering from start time to start time:                    /balancing/pricing/market-index?from&#x3D;2022-06-01T00:00Z&amp;to&#x3D;2022-07-01T00:00Z                Filtering from start time to settlement date and period:                    /balancing/pricing/market-index?from&#x3D;2022-06-01T00:00Z&amp;to&#x3D;2022-07-01T00:00Z&amp;settlementPeriodTo&#x3D;1                Filtering from settlement date and period to start time:                    /balancing/pricing/market-index?from&#x3D;2022-06-01T00:00Z&amp;to&#x3D;2022-07-01T00:00Z&amp;settlementPeriodFrom&#x3D;1                Filtering from settlement date and period to settlement date and period:                    /balancing/pricing/market-index?from&#x3D;2022-06-01T00:00Z&amp;to&#x3D;2022-07-01T00:00Z&amp;settlementPeriodFrom&#x3D;1&amp;settlementPeriodTo&#x3D;1
        /// </remarks>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The \&quot;from\&quot; start time or settlement date for the filter.</param>
        /// <param name="to">The \&quot;to\&quot; start time or settlement date for the filter.</param>
        /// <param name="settlementPeriodFrom">The \&quot;from\&quot; settlement period for the filter. This should be an integer from 1-50 inclusive. (optional)</param>
        /// <param name="settlementPeriodTo">The \&quot;to\&quot; settlement period for the filter. This should be an integer from 1-50 inclusive. (optional)</param>
        /// <param name="dataProviders">The data providers to query. If no data provider is selected both will be displayed. (optional)</param>
        /// <param name="format">Response data format. Use json/xml to include metadata. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingMarketIndexResponse)</returns>
        System.Threading.Tasks.Task<ApiResponse<InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingMarketIndexResponse>> BalancingPricingMarketIndexGetWithHttpInfoAsync(DateTime from, DateTime to, int? settlementPeriodFrom = default(int?), int? settlementPeriodTo = default(int?), List<string>? dataProviders = default(List<string>?), string? format = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken));
        #endregion Asynchronous Operations
    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public interface IMarketIndexApi : IMarketIndexApiSync, IMarketIndexApiAsync
    {

    }

    /// <summary>
    /// Represents a collection of functions to interact with the API endpoints
    /// </summary>
    public partial class MarketIndexApi : IMarketIndexApi
    {
        private Org.OpenAPITools.Client.ExceptionFactory _exceptionFactory = (name, response) => null;

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketIndexApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MarketIndexApi() : this((string)null)
        {
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketIndexApi"/> class.
        /// </summary>
        /// <returns></returns>
        public MarketIndexApi(string basePath)
        {
            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                new Org.OpenAPITools.Client.Configuration { BasePath = basePath }
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketIndexApi"/> class
        /// using Configuration object
        /// </summary>
        /// <param name="configuration">An instance of Configuration</param>
        /// <returns></returns>
        public MarketIndexApi(Org.OpenAPITools.Client.Configuration configuration)
        {
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Configuration = Org.OpenAPITools.Client.Configuration.MergeConfigurations(
                Org.OpenAPITools.Client.GlobalConfiguration.Instance,
                configuration
            );
            this.Client = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            this.AsynchronousClient = new Org.OpenAPITools.Client.ApiClient(this.Configuration.BasePath);
            ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// Initializes a new instance of the <see cref="MarketIndexApi"/> class
        /// using a Configuration object and client instance.
        /// </summary>
        /// <param name="client">The client interface for synchronous API access.</param>
        /// <param name="asyncClient">The client interface for asynchronous API access.</param>
        /// <param name="configuration">The configuration object.</param>
        public MarketIndexApi(Org.OpenAPITools.Client.ISynchronousClient client, Org.OpenAPITools.Client.IAsynchronousClient asyncClient, Org.OpenAPITools.Client.IReadableConfiguration configuration)
        {
            if (client == null) throw new ArgumentNullException("client");
            if (asyncClient == null) throw new ArgumentNullException("asyncClient");
            if (configuration == null) throw new ArgumentNullException("configuration");

            this.Client = client;
            this.AsynchronousClient = asyncClient;
            this.Configuration = configuration;
            this.ExceptionFactory = Org.OpenAPITools.Client.Configuration.DefaultExceptionFactory;
        }

        /// <summary>
        /// The client for accessing this underlying API asynchronously.
        /// </summary>
        public Org.OpenAPITools.Client.IAsynchronousClient AsynchronousClient { get; set; }

        /// <summary>
        /// The client for accessing this underlying API synchronously.
        /// </summary>
        public Org.OpenAPITools.Client.ISynchronousClient Client { get; set; }

        /// <summary>
        /// Gets the base path of the API client.
        /// </summary>
        /// <value>The base path</value>
        public string GetBasePath()
        {
            return this.Configuration.BasePath;
        }

        /// <summary>
        /// Gets or sets the configuration object
        /// </summary>
        /// <value>An instance of the Configuration</value>
        public Org.OpenAPITools.Client.IReadableConfiguration Configuration { get; set; }

        /// <summary>
        /// Provides a factory method hook for the creation of exceptions.
        /// </summary>
        public Org.OpenAPITools.Client.ExceptionFactory ExceptionFactory
        {
            get
            {
                if (_exceptionFactory != null && _exceptionFactory.GetInvocationList().Length > 1)
                {
                    throw new InvalidOperationException("Multicast delegate for ExceptionFactory is unsupported.");
                }
                return _exceptionFactory;
            }
            set { _exceptionFactory = value; }
        }

        /// <summary>
        /// Market Index Data (MID) price time series This endpoint provides Market Index Data received from NGESO.                Market Index Data is a key component in the calculation of System Buy Price and System Sell Price for each  Settlement Period. This data is received from each of the appointed Market Index Data Providers (MIDPs) and  reflects the price of wholesale electricity in Great Britain in the short term markets. The Market Index Data  which is received from each MIDP for each Settlement Period consists of a Market Index Volume and  Market Index Price, representing the volume and price of trading for the relevant period in the market operated  by the MIDP. The Market Price (the volume weighed average Market Index Price) is used to derive  the Reverse Price (SBP or SSP).\&quot;                The two data providers available to query are N2EX (\&quot;N2EXMIDP\&quot;) and APX (\&quot;APXMIDP\&quot;).    By default, the from and to parameters filter the data by time inclusively. If the settlementPeriodFrom or  settlementPeriodTo parameters are provided, the corresponding from or to parameter instead filters on settlement  date, allowing for searching by a combination of time and/or settlement date &amp; settlement period.  Note: When filtering via settlement date, from/to are treated as Dates only, with the time being ignored. For  example, 2022-06-01T00:00Z and 2022-06-01T11:11Z are both treated as the settlement date 2022-06-01.                All Dates and DateTimes should be expressed as defined within  &lt;a href&#x3D;\&quot;https://datatracker.ietf.org/doc/html/rfc3339#section-5.6\&quot; target&#x3D;\&quot;_blank\&quot;&gt;RFC 3339&lt;/a&gt;.                Some examples of date parameter combinations are shown below.                Filtering from start time to start time:                    /balancing/pricing/market-index?from&#x3D;2022-06-01T00:00Z&amp;to&#x3D;2022-07-01T00:00Z                Filtering from start time to settlement date and period:                    /balancing/pricing/market-index?from&#x3D;2022-06-01T00:00Z&amp;to&#x3D;2022-07-01T00:00Z&amp;settlementPeriodTo&#x3D;1                Filtering from settlement date and period to start time:                    /balancing/pricing/market-index?from&#x3D;2022-06-01T00:00Z&amp;to&#x3D;2022-07-01T00:00Z&amp;settlementPeriodFrom&#x3D;1                Filtering from settlement date and period to settlement date and period:                    /balancing/pricing/market-index?from&#x3D;2022-06-01T00:00Z&amp;to&#x3D;2022-07-01T00:00Z&amp;settlementPeriodFrom&#x3D;1&amp;settlementPeriodTo&#x3D;1
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The \&quot;from\&quot; start time or settlement date for the filter.</param>
        /// <param name="to">The \&quot;to\&quot; start time or settlement date for the filter.</param>
        /// <param name="settlementPeriodFrom">The \&quot;from\&quot; settlement period for the filter. This should be an integer from 1-50 inclusive. (optional)</param>
        /// <param name="settlementPeriodTo">The \&quot;to\&quot; settlement period for the filter. This should be an integer from 1-50 inclusive. (optional)</param>
        /// <param name="dataProviders">The data providers to query. If no data provider is selected both will be displayed. (optional)</param>
        /// <param name="format">Response data format. Use json/xml to include metadata. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingMarketIndexResponse</returns>
        public InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingMarketIndexResponse BalancingPricingMarketIndexGet(DateTime from, DateTime to, int? settlementPeriodFrom = default(int?), int? settlementPeriodTo = default(int?), List<string>? dataProviders = default(List<string>?), string? format = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.ApiResponse<InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingMarketIndexResponse> localVarResponse = BalancingPricingMarketIndexGetWithHttpInfo(from, to, settlementPeriodFrom, settlementPeriodTo, dataProviders, format);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Market Index Data (MID) price time series This endpoint provides Market Index Data received from NGESO.                Market Index Data is a key component in the calculation of System Buy Price and System Sell Price for each  Settlement Period. This data is received from each of the appointed Market Index Data Providers (MIDPs) and  reflects the price of wholesale electricity in Great Britain in the short term markets. The Market Index Data  which is received from each MIDP for each Settlement Period consists of a Market Index Volume and  Market Index Price, representing the volume and price of trading for the relevant period in the market operated  by the MIDP. The Market Price (the volume weighed average Market Index Price) is used to derive  the Reverse Price (SBP or SSP).\&quot;                The two data providers available to query are N2EX (\&quot;N2EXMIDP\&quot;) and APX (\&quot;APXMIDP\&quot;).    By default, the from and to parameters filter the data by time inclusively. If the settlementPeriodFrom or  settlementPeriodTo parameters are provided, the corresponding from or to parameter instead filters on settlement  date, allowing for searching by a combination of time and/or settlement date &amp; settlement period.  Note: When filtering via settlement date, from/to are treated as Dates only, with the time being ignored. For  example, 2022-06-01T00:00Z and 2022-06-01T11:11Z are both treated as the settlement date 2022-06-01.                All Dates and DateTimes should be expressed as defined within  &lt;a href&#x3D;\&quot;https://datatracker.ietf.org/doc/html/rfc3339#section-5.6\&quot; target&#x3D;\&quot;_blank\&quot;&gt;RFC 3339&lt;/a&gt;.                Some examples of date parameter combinations are shown below.                Filtering from start time to start time:                    /balancing/pricing/market-index?from&#x3D;2022-06-01T00:00Z&amp;to&#x3D;2022-07-01T00:00Z                Filtering from start time to settlement date and period:                    /balancing/pricing/market-index?from&#x3D;2022-06-01T00:00Z&amp;to&#x3D;2022-07-01T00:00Z&amp;settlementPeriodTo&#x3D;1                Filtering from settlement date and period to start time:                    /balancing/pricing/market-index?from&#x3D;2022-06-01T00:00Z&amp;to&#x3D;2022-07-01T00:00Z&amp;settlementPeriodFrom&#x3D;1                Filtering from settlement date and period to settlement date and period:                    /balancing/pricing/market-index?from&#x3D;2022-06-01T00:00Z&amp;to&#x3D;2022-07-01T00:00Z&amp;settlementPeriodFrom&#x3D;1&amp;settlementPeriodTo&#x3D;1
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The \&quot;from\&quot; start time or settlement date for the filter.</param>
        /// <param name="to">The \&quot;to\&quot; start time or settlement date for the filter.</param>
        /// <param name="settlementPeriodFrom">The \&quot;from\&quot; settlement period for the filter. This should be an integer from 1-50 inclusive. (optional)</param>
        /// <param name="settlementPeriodTo">The \&quot;to\&quot; settlement period for the filter. This should be an integer from 1-50 inclusive. (optional)</param>
        /// <param name="dataProviders">The data providers to query. If no data provider is selected both will be displayed. (optional)</param>
        /// <param name="format">Response data format. Use json/xml to include metadata. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <returns>ApiResponse of InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingMarketIndexResponse</returns>
        public Org.OpenAPITools.Client.ApiResponse<InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingMarketIndexResponse> BalancingPricingMarketIndexGetWithHttpInfo(DateTime from, DateTime to, int? settlementPeriodFrom = default(int?), int? settlementPeriodTo = default(int?), List<string>? dataProviders = default(List<string>?), string? format = default(string?), int operationIndex = 0)
        {
            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "text/csv"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            if (settlementPeriodFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "settlementPeriodFrom", settlementPeriodFrom));
            }
            if (settlementPeriodTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "settlementPeriodTo", settlementPeriodTo));
            }
            if (dataProviders != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "dataProviders", dataProviders));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "MarketIndexApi.BalancingPricingMarketIndexGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = this.Client.Get<InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingMarketIndexResponse>("/balancing/pricing/market-index", localVarRequestOptions, this.Configuration);
            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BalancingPricingMarketIndexGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

        /// <summary>
        /// Market Index Data (MID) price time series This endpoint provides Market Index Data received from NGESO.                Market Index Data is a key component in the calculation of System Buy Price and System Sell Price for each  Settlement Period. This data is received from each of the appointed Market Index Data Providers (MIDPs) and  reflects the price of wholesale electricity in Great Britain in the short term markets. The Market Index Data  which is received from each MIDP for each Settlement Period consists of a Market Index Volume and  Market Index Price, representing the volume and price of trading for the relevant period in the market operated  by the MIDP. The Market Price (the volume weighed average Market Index Price) is used to derive  the Reverse Price (SBP or SSP).\&quot;                The two data providers available to query are N2EX (\&quot;N2EXMIDP\&quot;) and APX (\&quot;APXMIDP\&quot;).    By default, the from and to parameters filter the data by time inclusively. If the settlementPeriodFrom or  settlementPeriodTo parameters are provided, the corresponding from or to parameter instead filters on settlement  date, allowing for searching by a combination of time and/or settlement date &amp; settlement period.  Note: When filtering via settlement date, from/to are treated as Dates only, with the time being ignored. For  example, 2022-06-01T00:00Z and 2022-06-01T11:11Z are both treated as the settlement date 2022-06-01.                All Dates and DateTimes should be expressed as defined within  &lt;a href&#x3D;\&quot;https://datatracker.ietf.org/doc/html/rfc3339#section-5.6\&quot; target&#x3D;\&quot;_blank\&quot;&gt;RFC 3339&lt;/a&gt;.                Some examples of date parameter combinations are shown below.                Filtering from start time to start time:                    /balancing/pricing/market-index?from&#x3D;2022-06-01T00:00Z&amp;to&#x3D;2022-07-01T00:00Z                Filtering from start time to settlement date and period:                    /balancing/pricing/market-index?from&#x3D;2022-06-01T00:00Z&amp;to&#x3D;2022-07-01T00:00Z&amp;settlementPeriodTo&#x3D;1                Filtering from settlement date and period to start time:                    /balancing/pricing/market-index?from&#x3D;2022-06-01T00:00Z&amp;to&#x3D;2022-07-01T00:00Z&amp;settlementPeriodFrom&#x3D;1                Filtering from settlement date and period to settlement date and period:                    /balancing/pricing/market-index?from&#x3D;2022-06-01T00:00Z&amp;to&#x3D;2022-07-01T00:00Z&amp;settlementPeriodFrom&#x3D;1&amp;settlementPeriodTo&#x3D;1
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The \&quot;from\&quot; start time or settlement date for the filter.</param>
        /// <param name="to">The \&quot;to\&quot; start time or settlement date for the filter.</param>
        /// <param name="settlementPeriodFrom">The \&quot;from\&quot; settlement period for the filter. This should be an integer from 1-50 inclusive. (optional)</param>
        /// <param name="settlementPeriodTo">The \&quot;to\&quot; settlement period for the filter. This should be an integer from 1-50 inclusive. (optional)</param>
        /// <param name="dataProviders">The data providers to query. If no data provider is selected both will be displayed. (optional)</param>
        /// <param name="format">Response data format. Use json/xml to include metadata. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingMarketIndexResponse</returns>
        public async System.Threading.Tasks.Task<InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingMarketIndexResponse> BalancingPricingMarketIndexGetAsync(DateTime from, DateTime to, int? settlementPeriodFrom = default(int?), int? settlementPeriodTo = default(int?), List<string>? dataProviders = default(List<string>?), string? format = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {
            Org.OpenAPITools.Client.ApiResponse<InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingMarketIndexResponse> localVarResponse = await BalancingPricingMarketIndexGetWithHttpInfoAsync(from, to, settlementPeriodFrom, settlementPeriodTo, dataProviders, format, operationIndex, cancellationToken).ConfigureAwait(false);
            return localVarResponse.Data;
        }

        /// <summary>
        /// Market Index Data (MID) price time series This endpoint provides Market Index Data received from NGESO.                Market Index Data is a key component in the calculation of System Buy Price and System Sell Price for each  Settlement Period. This data is received from each of the appointed Market Index Data Providers (MIDPs) and  reflects the price of wholesale electricity in Great Britain in the short term markets. The Market Index Data  which is received from each MIDP for each Settlement Period consists of a Market Index Volume and  Market Index Price, representing the volume and price of trading for the relevant period in the market operated  by the MIDP. The Market Price (the volume weighed average Market Index Price) is used to derive  the Reverse Price (SBP or SSP).\&quot;                The two data providers available to query are N2EX (\&quot;N2EXMIDP\&quot;) and APX (\&quot;APXMIDP\&quot;).    By default, the from and to parameters filter the data by time inclusively. If the settlementPeriodFrom or  settlementPeriodTo parameters are provided, the corresponding from or to parameter instead filters on settlement  date, allowing for searching by a combination of time and/or settlement date &amp; settlement period.  Note: When filtering via settlement date, from/to are treated as Dates only, with the time being ignored. For  example, 2022-06-01T00:00Z and 2022-06-01T11:11Z are both treated as the settlement date 2022-06-01.                All Dates and DateTimes should be expressed as defined within  &lt;a href&#x3D;\&quot;https://datatracker.ietf.org/doc/html/rfc3339#section-5.6\&quot; target&#x3D;\&quot;_blank\&quot;&gt;RFC 3339&lt;/a&gt;.                Some examples of date parameter combinations are shown below.                Filtering from start time to start time:                    /balancing/pricing/market-index?from&#x3D;2022-06-01T00:00Z&amp;to&#x3D;2022-07-01T00:00Z                Filtering from start time to settlement date and period:                    /balancing/pricing/market-index?from&#x3D;2022-06-01T00:00Z&amp;to&#x3D;2022-07-01T00:00Z&amp;settlementPeriodTo&#x3D;1                Filtering from settlement date and period to start time:                    /balancing/pricing/market-index?from&#x3D;2022-06-01T00:00Z&amp;to&#x3D;2022-07-01T00:00Z&amp;settlementPeriodFrom&#x3D;1                Filtering from settlement date and period to settlement date and period:                    /balancing/pricing/market-index?from&#x3D;2022-06-01T00:00Z&amp;to&#x3D;2022-07-01T00:00Z&amp;settlementPeriodFrom&#x3D;1&amp;settlementPeriodTo&#x3D;1
        /// </summary>
        /// <exception cref="Org.OpenAPITools.Client.ApiException">Thrown when fails to make API call</exception>
        /// <param name="from">The \&quot;from\&quot; start time or settlement date for the filter.</param>
        /// <param name="to">The \&quot;to\&quot; start time or settlement date for the filter.</param>
        /// <param name="settlementPeriodFrom">The \&quot;from\&quot; settlement period for the filter. This should be an integer from 1-50 inclusive. (optional)</param>
        /// <param name="settlementPeriodTo">The \&quot;to\&quot; settlement period for the filter. This should be an integer from 1-50 inclusive. (optional)</param>
        /// <param name="dataProviders">The data providers to query. If no data provider is selected both will be displayed. (optional)</param>
        /// <param name="format">Response data format. Use json/xml to include metadata. (optional)</param>
        /// <param name="operationIndex">Index associated with the operation.</param>
        /// <param name="cancellationToken">Cancellation Token to cancel the request.</param>
        /// <returns>Task of ApiResponse (InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingMarketIndexResponse)</returns>
        public async System.Threading.Tasks.Task<Org.OpenAPITools.Client.ApiResponse<InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingMarketIndexResponse>> BalancingPricingMarketIndexGetWithHttpInfoAsync(DateTime from, DateTime to, int? settlementPeriodFrom = default(int?), int? settlementPeriodTo = default(int?), List<string>? dataProviders = default(List<string>?), string? format = default(string?), int operationIndex = 0, System.Threading.CancellationToken cancellationToken = default(System.Threading.CancellationToken))
        {

            Org.OpenAPITools.Client.RequestOptions localVarRequestOptions = new Org.OpenAPITools.Client.RequestOptions();

            string[] _contentTypes = new string[] {
            };

            // to determine the Accept header
            string[] _accepts = new string[] {
                "text/plain",
                "application/json",
                "text/json",
                "application/xml",
                "text/xml",
                "text/csv"
            };

            var localVarContentType = Org.OpenAPITools.Client.ClientUtils.SelectHeaderContentType(_contentTypes);
            if (localVarContentType != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Content-Type", localVarContentType);
            }

            var localVarAccept = Org.OpenAPITools.Client.ClientUtils.SelectHeaderAccept(_accepts);
            if (localVarAccept != null)
            {
                localVarRequestOptions.HeaderParameters.Add("Accept", localVarAccept);
            }

            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "from", from));
            localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "to", to));
            if (settlementPeriodFrom != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "settlementPeriodFrom", settlementPeriodFrom));
            }
            if (settlementPeriodTo != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "settlementPeriodTo", settlementPeriodTo));
            }
            if (dataProviders != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("multi", "dataProviders", dataProviders));
            }
            if (format != null)
            {
                localVarRequestOptions.QueryParameters.Add(Org.OpenAPITools.Client.ClientUtils.ParameterToMultiMap("", "format", format));
            }

            localVarRequestOptions.Operation = "MarketIndexApi.BalancingPricingMarketIndexGet";
            localVarRequestOptions.OperationIndex = operationIndex;


            // make the HTTP request
            var localVarResponse = await this.AsynchronousClient.GetAsync<InsightsApiModelsResponsesResponseWithMetadata1InsightsApiModelsResponsesBalancingMarketIndexResponse>("/balancing/pricing/market-index", localVarRequestOptions, this.Configuration, cancellationToken).ConfigureAwait(false);

            if (this.ExceptionFactory != null)
            {
                Exception _exception = this.ExceptionFactory("BalancingPricingMarketIndexGet", localVarResponse);
                if (_exception != null)
                {
                    throw _exception;
                }
            }

            return localVarResponse;
        }

    }
}
