/*
 * Insights.Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// InsightsApiModelsResponsesTransparencyDatasetRowsMonthAheadTotalLoadPerBiddingZoneDatasetRow
    /// </summary>
    [DataContract(Name = "Insights.Api.Models.Responses.Transparency.DatasetRows.MonthAheadTotalLoadPerBiddingZoneDatasetRow")]
    public partial class InsightsApiModelsResponsesTransparencyDatasetRowsMonthAheadTotalLoadPerBiddingZoneDatasetRow : IEquatable<InsightsApiModelsResponsesTransparencyDatasetRowsMonthAheadTotalLoadPerBiddingZoneDatasetRow>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InsightsApiModelsResponsesTransparencyDatasetRowsMonthAheadTotalLoadPerBiddingZoneDatasetRow" /> class.
        /// </summary>
        /// <param name="dataset">dataset.</param>
        /// <param name="documentId">documentId.</param>
        /// <param name="documentRevisionNumber">documentRevisionNumber.</param>
        /// <param name="publishTime">publishTime.</param>
        /// <param name="forecastWeekCommencingDate">forecastWeekCommencingDate.</param>
        /// <param name="forecastYear">forecastYear.</param>
        /// <param name="forecastMonth">forecastMonth.</param>
        /// <param name="minimumPossible">minimumPossible.</param>
        /// <param name="maximumAvailable">maximumAvailable.</param>
        public InsightsApiModelsResponsesTransparencyDatasetRowsMonthAheadTotalLoadPerBiddingZoneDatasetRow(string dataset = default(string), string documentId = default(string), int documentRevisionNumber = default(int), DateTime publishTime = default(DateTime), DateTime forecastWeekCommencingDate = default(DateTime), int forecastYear = default(int), string forecastMonth = default(string), double minimumPossible = default(double), double maximumAvailable = default(double))
        {
            this.Dataset = dataset;
            this.DocumentId = documentId;
            this.DocumentRevisionNumber = documentRevisionNumber;
            this.PublishTime = publishTime;
            this.ForecastWeekCommencingDate = forecastWeekCommencingDate;
            this.ForecastYear = forecastYear;
            this.ForecastMonth = forecastMonth;
            this.MinimumPossible = minimumPossible;
            this.MaximumAvailable = maximumAvailable;
        }

        /// <summary>
        /// Gets or Sets Dataset
        /// </summary>
        /// <example>MATL</example>
        [DataMember(Name = "dataset", EmitDefaultValue = true)]
        public string Dataset { get; set; }

        /// <summary>
        /// Gets or Sets DocumentId
        /// </summary>
        /// <example>NGET-EMFIP-WATL-16209423</example>
        [DataMember(Name = "documentId", EmitDefaultValue = true)]
        public string DocumentId { get; set; }

        /// <summary>
        /// Gets or Sets DocumentRevisionNumber
        /// </summary>
        /// <example>1</example>
        [DataMember(Name = "documentRevisionNumber", EmitDefaultValue = false)]
        public int DocumentRevisionNumber { get; set; }

        /// <summary>
        /// Gets or Sets PublishTime
        /// </summary>
        [DataMember(Name = "publishTime", EmitDefaultValue = false)]
        public DateTime PublishTime { get; set; }

        /// <summary>
        /// Gets or Sets ForecastWeekCommencingDate
        /// </summary>
        /// <example>Mon May 29 02:00:00 CEST 2023</example>
        [DataMember(Name = "forecastWeekCommencingDate", EmitDefaultValue = false)]
        [JsonConverter(typeof(OpenAPIDateConverter))]
        public DateTime ForecastWeekCommencingDate { get; set; }

        /// <summary>
        /// Gets or Sets ForecastYear
        /// </summary>
        /// <example>2023</example>
        [DataMember(Name = "forecastYear", EmitDefaultValue = false)]
        public int ForecastYear { get; set; }

        /// <summary>
        /// Gets or Sets ForecastMonth
        /// </summary>
        /// <example>JUN</example>
        [DataMember(Name = "forecastMonth", EmitDefaultValue = true)]
        public string ForecastMonth { get; set; }

        /// <summary>
        /// Gets or Sets MinimumPossible
        /// </summary>
        /// <example>18034</example>
        [DataMember(Name = "minimumPossible", EmitDefaultValue = false)]
        public double MinimumPossible { get; set; }

        /// <summary>
        /// Gets or Sets MaximumAvailable
        /// </summary>
        /// <example>35011</example>
        [DataMember(Name = "maximumAvailable", EmitDefaultValue = false)]
        public double MaximumAvailable { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InsightsApiModelsResponsesTransparencyDatasetRowsMonthAheadTotalLoadPerBiddingZoneDatasetRow {\n");
            sb.Append("  Dataset: ").Append(Dataset).Append("\n");
            sb.Append("  DocumentId: ").Append(DocumentId).Append("\n");
            sb.Append("  DocumentRevisionNumber: ").Append(DocumentRevisionNumber).Append("\n");
            sb.Append("  PublishTime: ").Append(PublishTime).Append("\n");
            sb.Append("  ForecastWeekCommencingDate: ").Append(ForecastWeekCommencingDate).Append("\n");
            sb.Append("  ForecastYear: ").Append(ForecastYear).Append("\n");
            sb.Append("  ForecastMonth: ").Append(ForecastMonth).Append("\n");
            sb.Append("  MinimumPossible: ").Append(MinimumPossible).Append("\n");
            sb.Append("  MaximumAvailable: ").Append(MaximumAvailable).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InsightsApiModelsResponsesTransparencyDatasetRowsMonthAheadTotalLoadPerBiddingZoneDatasetRow);
        }

        /// <summary>
        /// Returns true if InsightsApiModelsResponsesTransparencyDatasetRowsMonthAheadTotalLoadPerBiddingZoneDatasetRow instances are equal
        /// </summary>
        /// <param name="input">Instance of InsightsApiModelsResponsesTransparencyDatasetRowsMonthAheadTotalLoadPerBiddingZoneDatasetRow to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InsightsApiModelsResponsesTransparencyDatasetRowsMonthAheadTotalLoadPerBiddingZoneDatasetRow input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Dataset == input.Dataset ||
                    (this.Dataset != null &&
                    this.Dataset.Equals(input.Dataset))
                ) && 
                (
                    this.DocumentId == input.DocumentId ||
                    (this.DocumentId != null &&
                    this.DocumentId.Equals(input.DocumentId))
                ) && 
                (
                    this.DocumentRevisionNumber == input.DocumentRevisionNumber ||
                    this.DocumentRevisionNumber.Equals(input.DocumentRevisionNumber)
                ) && 
                (
                    this.PublishTime == input.PublishTime ||
                    (this.PublishTime != null &&
                    this.PublishTime.Equals(input.PublishTime))
                ) && 
                (
                    this.ForecastWeekCommencingDate == input.ForecastWeekCommencingDate ||
                    (this.ForecastWeekCommencingDate != null &&
                    this.ForecastWeekCommencingDate.Equals(input.ForecastWeekCommencingDate))
                ) && 
                (
                    this.ForecastYear == input.ForecastYear ||
                    this.ForecastYear.Equals(input.ForecastYear)
                ) && 
                (
                    this.ForecastMonth == input.ForecastMonth ||
                    (this.ForecastMonth != null &&
                    this.ForecastMonth.Equals(input.ForecastMonth))
                ) && 
                (
                    this.MinimumPossible == input.MinimumPossible ||
                    this.MinimumPossible.Equals(input.MinimumPossible)
                ) && 
                (
                    this.MaximumAvailable == input.MaximumAvailable ||
                    this.MaximumAvailable.Equals(input.MaximumAvailable)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Dataset != null)
                {
                    hashCode = (hashCode * 59) + this.Dataset.GetHashCode();
                }
                if (this.DocumentId != null)
                {
                    hashCode = (hashCode * 59) + this.DocumentId.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.DocumentRevisionNumber.GetHashCode();
                if (this.PublishTime != null)
                {
                    hashCode = (hashCode * 59) + this.PublishTime.GetHashCode();
                }
                if (this.ForecastWeekCommencingDate != null)
                {
                    hashCode = (hashCode * 59) + this.ForecastWeekCommencingDate.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.ForecastYear.GetHashCode();
                if (this.ForecastMonth != null)
                {
                    hashCode = (hashCode * 59) + this.ForecastMonth.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.MinimumPossible.GetHashCode();
                hashCode = (hashCode * 59) + this.MaximumAvailable.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
