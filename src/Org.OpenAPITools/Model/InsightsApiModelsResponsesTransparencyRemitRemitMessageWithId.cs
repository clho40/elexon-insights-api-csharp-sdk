/*
 * Insights.Api
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */


using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.IO;
using System.Runtime.Serialization;
using System.Text;
using System.Text.RegularExpressions;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using Newtonsoft.Json.Linq;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Org.OpenAPITools.Client.OpenAPIDateConverter;

namespace Org.OpenAPITools.Model
{
    /// <summary>
    /// InsightsApiModelsResponsesTransparencyRemitRemitMessageWithId
    /// </summary>
    [DataContract(Name = "Insights.Api.Models.Responses.Transparency.Remit.RemitMessageWithId")]
    public partial class InsightsApiModelsResponsesTransparencyRemitRemitMessageWithId : IEquatable<InsightsApiModelsResponsesTransparencyRemitRemitMessageWithId>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="InsightsApiModelsResponsesTransparencyRemitRemitMessageWithId" /> class.
        /// </summary>
        /// <param name="dataset">dataset.</param>
        /// <param name="mrid">mrid.</param>
        /// <param name="revisionNumber">revisionNumber.</param>
        /// <param name="publishTime">publishTime.</param>
        /// <param name="createdTime">createdTime.</param>
        /// <param name="messageType">messageType.</param>
        /// <param name="messageHeading">messageHeading.</param>
        /// <param name="eventType">eventType.</param>
        /// <param name="unavailabilityType">unavailabilityType.</param>
        /// <param name="participantId">participantId.</param>
        /// <param name="registrationCode">registrationCode.</param>
        /// <param name="assetId">assetId.</param>
        /// <param name="assetType">assetType.</param>
        /// <param name="affectedUnit">affectedUnit.</param>
        /// <param name="affectedUnitEIC">affectedUnitEIC.</param>
        /// <param name="affectedArea">affectedArea.</param>
        /// <param name="biddingZone">biddingZone.</param>
        /// <param name="fuelType">fuelType.</param>
        /// <param name="normalCapacity">normalCapacity.</param>
        /// <param name="availableCapacity">availableCapacity.</param>
        /// <param name="unavailableCapacity">unavailableCapacity.</param>
        /// <param name="eventStatus">eventStatus.</param>
        /// <param name="eventStartTime">eventStartTime.</param>
        /// <param name="eventEndTime">eventEndTime.</param>
        /// <param name="durationUncertainty">durationUncertainty.</param>
        /// <param name="cause">cause.</param>
        /// <param name="relatedInformation">relatedInformation.</param>
        /// <param name="outageProfile">outageProfile.</param>
        /// <param name="id">id.</param>
        public InsightsApiModelsResponsesTransparencyRemitRemitMessageWithId(string dataset = default(string), string mrid = default(string), int revisionNumber = default(int), DateTime publishTime = default(DateTime), DateTime createdTime = default(DateTime), string messageType = default(string), string messageHeading = default(string), string eventType = default(string), string unavailabilityType = default(string), string participantId = default(string), string registrationCode = default(string), string assetId = default(string), string assetType = default(string), string affectedUnit = default(string), string affectedUnitEIC = default(string), string affectedArea = default(string), string biddingZone = default(string), string fuelType = default(string), double? normalCapacity = default(double?), double? availableCapacity = default(double?), double? unavailableCapacity = default(double?), string eventStatus = default(string), DateTime eventStartTime = default(DateTime), DateTime? eventEndTime = default(DateTime?), string durationUncertainty = default(string), string cause = default(string), string relatedInformation = default(string), List<InsightsApiModelsResponsesTransparencyRemitDatasetRowsOutageProfileData> outageProfile = default(List<InsightsApiModelsResponsesTransparencyRemitDatasetRowsOutageProfileData>), int id = default(int))
        {
            this.Dataset = dataset;
            this.Mrid = mrid;
            this.RevisionNumber = revisionNumber;
            this.PublishTime = publishTime;
            this.CreatedTime = createdTime;
            this.MessageType = messageType;
            this.MessageHeading = messageHeading;
            this.EventType = eventType;
            this.UnavailabilityType = unavailabilityType;
            this.ParticipantId = participantId;
            this.RegistrationCode = registrationCode;
            this.AssetId = assetId;
            this.AssetType = assetType;
            this.AffectedUnit = affectedUnit;
            this.AffectedUnitEIC = affectedUnitEIC;
            this.AffectedArea = affectedArea;
            this.BiddingZone = biddingZone;
            this.FuelType = fuelType;
            this.NormalCapacity = normalCapacity;
            this.AvailableCapacity = availableCapacity;
            this.UnavailableCapacity = unavailableCapacity;
            this.EventStatus = eventStatus;
            this.EventStartTime = eventStartTime;
            this.EventEndTime = eventEndTime;
            this.DurationUncertainty = durationUncertainty;
            this.Cause = cause;
            this.RelatedInformation = relatedInformation;
            this.OutageProfile = outageProfile;
            this.Id = id;
        }

        /// <summary>
        /// Gets or Sets Dataset
        /// </summary>
        /// <example>REMIT</example>
        [DataMember(Name = "dataset", EmitDefaultValue = true)]
        public string Dataset { get; set; }

        /// <summary>
        /// Gets or Sets Mrid
        /// </summary>
        /// <example>11XINNOGY------2-NGET-RMT-00084421</example>
        [DataMember(Name = "mrid", EmitDefaultValue = true)]
        public string Mrid { get; set; }

        /// <summary>
        /// Gets or Sets RevisionNumber
        /// </summary>
        /// <example>25</example>
        [DataMember(Name = "revisionNumber", EmitDefaultValue = false)]
        public int RevisionNumber { get; set; }

        /// <summary>
        /// Gets or Sets PublishTime
        /// </summary>
        /// <example>2023-01-31T17:39:15Z</example>
        [DataMember(Name = "publishTime", EmitDefaultValue = false)]
        public DateTime PublishTime { get; set; }

        /// <summary>
        /// Gets or Sets CreatedTime
        /// </summary>
        /// <example>2023-01-31T17:39:15Z</example>
        [DataMember(Name = "createdTime", EmitDefaultValue = false)]
        public DateTime CreatedTime { get; set; }

        /// <summary>
        /// Gets or Sets MessageType
        /// </summary>
        /// <example>UnavailabilitiesOfElectricityFacilities</example>
        [DataMember(Name = "messageType", EmitDefaultValue = true)]
        public string MessageType { get; set; }

        /// <summary>
        /// Gets or Sets MessageHeading
        /// </summary>
        /// <example>Planned Unavailability of Generation Unit</example>
        [DataMember(Name = "messageHeading", EmitDefaultValue = true)]
        public string MessageHeading { get; set; }

        /// <summary>
        /// Gets or Sets EventType
        /// </summary>
        /// <example>Production unavailability</example>
        [DataMember(Name = "eventType", EmitDefaultValue = true)]
        public string EventType { get; set; }

        /// <summary>
        /// Gets or Sets UnavailabilityType
        /// </summary>
        /// <example>Planned</example>
        [DataMember(Name = "unavailabilityType", EmitDefaultValue = true)]
        public string UnavailabilityType { get; set; }

        /// <summary>
        /// Gets or Sets ParticipantId
        /// </summary>
        /// <example>11XINNOGY------2</example>
        [DataMember(Name = "participantId", EmitDefaultValue = true)]
        public string ParticipantId { get; set; }

        /// <summary>
        /// Gets or Sets RegistrationCode
        /// </summary>
        /// <example>11XINNOGY------2</example>
        [DataMember(Name = "registrationCode", EmitDefaultValue = true)]
        public string RegistrationCode { get; set; }

        /// <summary>
        /// Gets or Sets AssetId
        /// </summary>
        /// <example>T_DIDCB5</example>
        [DataMember(Name = "assetId", EmitDefaultValue = true)]
        public string AssetId { get; set; }

        /// <summary>
        /// Gets or Sets AssetType
        /// </summary>
        /// <example>Production</example>
        [DataMember(Name = "assetType", EmitDefaultValue = true)]
        public string AssetType { get; set; }

        /// <summary>
        /// Gets or Sets AffectedUnit
        /// </summary>
        /// <example>DIDCB5</example>
        [DataMember(Name = "affectedUnit", EmitDefaultValue = true)]
        public string AffectedUnit { get; set; }

        /// <summary>
        /// Gets or Sets AffectedUnitEIC
        /// </summary>
        /// <example>48W000000DIDCB5C</example>
        [DataMember(Name = "affectedUnitEIC", EmitDefaultValue = true)]
        public string AffectedUnitEIC { get; set; }

        /// <summary>
        /// Gets or Sets AffectedArea
        /// </summary>
        /// <example>N</example>
        [DataMember(Name = "affectedArea", EmitDefaultValue = true)]
        public string AffectedArea { get; set; }

        /// <summary>
        /// Gets or Sets BiddingZone
        /// </summary>
        /// <example>10YGB----------A</example>
        [DataMember(Name = "biddingZone", EmitDefaultValue = true)]
        public string BiddingZone { get; set; }

        /// <summary>
        /// Gets or Sets FuelType
        /// </summary>
        /// <example>Fossil Gas</example>
        [DataMember(Name = "fuelType", EmitDefaultValue = true)]
        public string FuelType { get; set; }

        /// <summary>
        /// Gets or Sets NormalCapacity
        /// </summary>
        /// <example>780</example>
        [DataMember(Name = "normalCapacity", EmitDefaultValue = true)]
        public double? NormalCapacity { get; set; }

        /// <summary>
        /// Gets or Sets AvailableCapacity
        /// </summary>
        /// <example>320</example>
        [DataMember(Name = "availableCapacity", EmitDefaultValue = true)]
        public double? AvailableCapacity { get; set; }

        /// <summary>
        /// Gets or Sets UnavailableCapacity
        /// </summary>
        /// <example>361</example>
        [DataMember(Name = "unavailableCapacity", EmitDefaultValue = true)]
        public double? UnavailableCapacity { get; set; }

        /// <summary>
        /// Gets or Sets EventStatus
        /// </summary>
        /// <example>Inactive</example>
        [DataMember(Name = "eventStatus", EmitDefaultValue = true)]
        public string EventStatus { get; set; }

        /// <summary>
        /// Gets or Sets EventStartTime
        /// </summary>
        /// <example>2022-08-23T06:59Z</example>
        [DataMember(Name = "eventStartTime", EmitDefaultValue = false)]
        public DateTime EventStartTime { get; set; }

        /// <summary>
        /// Gets or Sets EventEndTime
        /// </summary>
        /// <example>2022-08-25T05:20:30Z</example>
        [DataMember(Name = "eventEndTime", EmitDefaultValue = true)]
        public DateTime? EventEndTime { get; set; }

        /// <summary>
        /// Gets or Sets DurationUncertainty
        /// </summary>
        /// <example>+- 1 day</example>
        [DataMember(Name = "durationUncertainty", EmitDefaultValue = true)]
        public string DurationUncertainty { get; set; }

        /// <summary>
        /// Gets or Sets Cause
        /// </summary>
        /// <example>Other</example>
        [DataMember(Name = "cause", EmitDefaultValue = true)]
        public string Cause { get; set; }

        /// <summary>
        /// Gets or Sets RelatedInformation
        /// </summary>
        /// <example>Status changed to Completed</example>
        [DataMember(Name = "relatedInformation", EmitDefaultValue = true)]
        public string RelatedInformation { get; set; }

        /// <summary>
        /// Gets or Sets OutageProfile
        /// </summary>
        /// <example>[{&quot;startTime&quot;:&quot;2023-02-03T21:06:31.000Z&quot;,&quot;endTime&quot;:&quot;2023-02-03T21:10:00.000Z&quot;,&quot;capacity&quot;:436}]</example>
        [DataMember(Name = "outageProfile", EmitDefaultValue = true)]
        public List<InsightsApiModelsResponsesTransparencyRemitDatasetRowsOutageProfileData> OutageProfile { get; set; }

        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        /// <example>1</example>
        [DataMember(Name = "id", EmitDefaultValue = false)]
        public int Id { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            StringBuilder sb = new StringBuilder();
            sb.Append("class InsightsApiModelsResponsesTransparencyRemitRemitMessageWithId {\n");
            sb.Append("  Dataset: ").Append(Dataset).Append("\n");
            sb.Append("  Mrid: ").Append(Mrid).Append("\n");
            sb.Append("  RevisionNumber: ").Append(RevisionNumber).Append("\n");
            sb.Append("  PublishTime: ").Append(PublishTime).Append("\n");
            sb.Append("  CreatedTime: ").Append(CreatedTime).Append("\n");
            sb.Append("  MessageType: ").Append(MessageType).Append("\n");
            sb.Append("  MessageHeading: ").Append(MessageHeading).Append("\n");
            sb.Append("  EventType: ").Append(EventType).Append("\n");
            sb.Append("  UnavailabilityType: ").Append(UnavailabilityType).Append("\n");
            sb.Append("  ParticipantId: ").Append(ParticipantId).Append("\n");
            sb.Append("  RegistrationCode: ").Append(RegistrationCode).Append("\n");
            sb.Append("  AssetId: ").Append(AssetId).Append("\n");
            sb.Append("  AssetType: ").Append(AssetType).Append("\n");
            sb.Append("  AffectedUnit: ").Append(AffectedUnit).Append("\n");
            sb.Append("  AffectedUnitEIC: ").Append(AffectedUnitEIC).Append("\n");
            sb.Append("  AffectedArea: ").Append(AffectedArea).Append("\n");
            sb.Append("  BiddingZone: ").Append(BiddingZone).Append("\n");
            sb.Append("  FuelType: ").Append(FuelType).Append("\n");
            sb.Append("  NormalCapacity: ").Append(NormalCapacity).Append("\n");
            sb.Append("  AvailableCapacity: ").Append(AvailableCapacity).Append("\n");
            sb.Append("  UnavailableCapacity: ").Append(UnavailableCapacity).Append("\n");
            sb.Append("  EventStatus: ").Append(EventStatus).Append("\n");
            sb.Append("  EventStartTime: ").Append(EventStartTime).Append("\n");
            sb.Append("  EventEndTime: ").Append(EventEndTime).Append("\n");
            sb.Append("  DurationUncertainty: ").Append(DurationUncertainty).Append("\n");
            sb.Append("  Cause: ").Append(Cause).Append("\n");
            sb.Append("  RelatedInformation: ").Append(RelatedInformation).Append("\n");
            sb.Append("  OutageProfile: ").Append(OutageProfile).Append("\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as InsightsApiModelsResponsesTransparencyRemitRemitMessageWithId);
        }

        /// <summary>
        /// Returns true if InsightsApiModelsResponsesTransparencyRemitRemitMessageWithId instances are equal
        /// </summary>
        /// <param name="input">Instance of InsightsApiModelsResponsesTransparencyRemitRemitMessageWithId to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(InsightsApiModelsResponsesTransparencyRemitRemitMessageWithId input)
        {
            if (input == null)
            {
                return false;
            }
            return 
                (
                    this.Dataset == input.Dataset ||
                    (this.Dataset != null &&
                    this.Dataset.Equals(input.Dataset))
                ) && 
                (
                    this.Mrid == input.Mrid ||
                    (this.Mrid != null &&
                    this.Mrid.Equals(input.Mrid))
                ) && 
                (
                    this.RevisionNumber == input.RevisionNumber ||
                    this.RevisionNumber.Equals(input.RevisionNumber)
                ) && 
                (
                    this.PublishTime == input.PublishTime ||
                    (this.PublishTime != null &&
                    this.PublishTime.Equals(input.PublishTime))
                ) && 
                (
                    this.CreatedTime == input.CreatedTime ||
                    (this.CreatedTime != null &&
                    this.CreatedTime.Equals(input.CreatedTime))
                ) && 
                (
                    this.MessageType == input.MessageType ||
                    (this.MessageType != null &&
                    this.MessageType.Equals(input.MessageType))
                ) && 
                (
                    this.MessageHeading == input.MessageHeading ||
                    (this.MessageHeading != null &&
                    this.MessageHeading.Equals(input.MessageHeading))
                ) && 
                (
                    this.EventType == input.EventType ||
                    (this.EventType != null &&
                    this.EventType.Equals(input.EventType))
                ) && 
                (
                    this.UnavailabilityType == input.UnavailabilityType ||
                    (this.UnavailabilityType != null &&
                    this.UnavailabilityType.Equals(input.UnavailabilityType))
                ) && 
                (
                    this.ParticipantId == input.ParticipantId ||
                    (this.ParticipantId != null &&
                    this.ParticipantId.Equals(input.ParticipantId))
                ) && 
                (
                    this.RegistrationCode == input.RegistrationCode ||
                    (this.RegistrationCode != null &&
                    this.RegistrationCode.Equals(input.RegistrationCode))
                ) && 
                (
                    this.AssetId == input.AssetId ||
                    (this.AssetId != null &&
                    this.AssetId.Equals(input.AssetId))
                ) && 
                (
                    this.AssetType == input.AssetType ||
                    (this.AssetType != null &&
                    this.AssetType.Equals(input.AssetType))
                ) && 
                (
                    this.AffectedUnit == input.AffectedUnit ||
                    (this.AffectedUnit != null &&
                    this.AffectedUnit.Equals(input.AffectedUnit))
                ) && 
                (
                    this.AffectedUnitEIC == input.AffectedUnitEIC ||
                    (this.AffectedUnitEIC != null &&
                    this.AffectedUnitEIC.Equals(input.AffectedUnitEIC))
                ) && 
                (
                    this.AffectedArea == input.AffectedArea ||
                    (this.AffectedArea != null &&
                    this.AffectedArea.Equals(input.AffectedArea))
                ) && 
                (
                    this.BiddingZone == input.BiddingZone ||
                    (this.BiddingZone != null &&
                    this.BiddingZone.Equals(input.BiddingZone))
                ) && 
                (
                    this.FuelType == input.FuelType ||
                    (this.FuelType != null &&
                    this.FuelType.Equals(input.FuelType))
                ) && 
                (
                    this.NormalCapacity == input.NormalCapacity ||
                    (this.NormalCapacity != null &&
                    this.NormalCapacity.Equals(input.NormalCapacity))
                ) && 
                (
                    this.AvailableCapacity == input.AvailableCapacity ||
                    (this.AvailableCapacity != null &&
                    this.AvailableCapacity.Equals(input.AvailableCapacity))
                ) && 
                (
                    this.UnavailableCapacity == input.UnavailableCapacity ||
                    (this.UnavailableCapacity != null &&
                    this.UnavailableCapacity.Equals(input.UnavailableCapacity))
                ) && 
                (
                    this.EventStatus == input.EventStatus ||
                    (this.EventStatus != null &&
                    this.EventStatus.Equals(input.EventStatus))
                ) && 
                (
                    this.EventStartTime == input.EventStartTime ||
                    (this.EventStartTime != null &&
                    this.EventStartTime.Equals(input.EventStartTime))
                ) && 
                (
                    this.EventEndTime == input.EventEndTime ||
                    (this.EventEndTime != null &&
                    this.EventEndTime.Equals(input.EventEndTime))
                ) && 
                (
                    this.DurationUncertainty == input.DurationUncertainty ||
                    (this.DurationUncertainty != null &&
                    this.DurationUncertainty.Equals(input.DurationUncertainty))
                ) && 
                (
                    this.Cause == input.Cause ||
                    (this.Cause != null &&
                    this.Cause.Equals(input.Cause))
                ) && 
                (
                    this.RelatedInformation == input.RelatedInformation ||
                    (this.RelatedInformation != null &&
                    this.RelatedInformation.Equals(input.RelatedInformation))
                ) && 
                (
                    this.OutageProfile == input.OutageProfile ||
                    this.OutageProfile != null &&
                    input.OutageProfile != null &&
                    this.OutageProfile.SequenceEqual(input.OutageProfile)
                ) && 
                (
                    this.Id == input.Id ||
                    this.Id.Equals(input.Id)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Dataset != null)
                {
                    hashCode = (hashCode * 59) + this.Dataset.GetHashCode();
                }
                if (this.Mrid != null)
                {
                    hashCode = (hashCode * 59) + this.Mrid.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.RevisionNumber.GetHashCode();
                if (this.PublishTime != null)
                {
                    hashCode = (hashCode * 59) + this.PublishTime.GetHashCode();
                }
                if (this.CreatedTime != null)
                {
                    hashCode = (hashCode * 59) + this.CreatedTime.GetHashCode();
                }
                if (this.MessageType != null)
                {
                    hashCode = (hashCode * 59) + this.MessageType.GetHashCode();
                }
                if (this.MessageHeading != null)
                {
                    hashCode = (hashCode * 59) + this.MessageHeading.GetHashCode();
                }
                if (this.EventType != null)
                {
                    hashCode = (hashCode * 59) + this.EventType.GetHashCode();
                }
                if (this.UnavailabilityType != null)
                {
                    hashCode = (hashCode * 59) + this.UnavailabilityType.GetHashCode();
                }
                if (this.ParticipantId != null)
                {
                    hashCode = (hashCode * 59) + this.ParticipantId.GetHashCode();
                }
                if (this.RegistrationCode != null)
                {
                    hashCode = (hashCode * 59) + this.RegistrationCode.GetHashCode();
                }
                if (this.AssetId != null)
                {
                    hashCode = (hashCode * 59) + this.AssetId.GetHashCode();
                }
                if (this.AssetType != null)
                {
                    hashCode = (hashCode * 59) + this.AssetType.GetHashCode();
                }
                if (this.AffectedUnit != null)
                {
                    hashCode = (hashCode * 59) + this.AffectedUnit.GetHashCode();
                }
                if (this.AffectedUnitEIC != null)
                {
                    hashCode = (hashCode * 59) + this.AffectedUnitEIC.GetHashCode();
                }
                if (this.AffectedArea != null)
                {
                    hashCode = (hashCode * 59) + this.AffectedArea.GetHashCode();
                }
                if (this.BiddingZone != null)
                {
                    hashCode = (hashCode * 59) + this.BiddingZone.GetHashCode();
                }
                if (this.FuelType != null)
                {
                    hashCode = (hashCode * 59) + this.FuelType.GetHashCode();
                }
                if (this.NormalCapacity != null)
                {
                    hashCode = (hashCode * 59) + this.NormalCapacity.GetHashCode();
                }
                if (this.AvailableCapacity != null)
                {
                    hashCode = (hashCode * 59) + this.AvailableCapacity.GetHashCode();
                }
                if (this.UnavailableCapacity != null)
                {
                    hashCode = (hashCode * 59) + this.UnavailableCapacity.GetHashCode();
                }
                if (this.EventStatus != null)
                {
                    hashCode = (hashCode * 59) + this.EventStatus.GetHashCode();
                }
                if (this.EventStartTime != null)
                {
                    hashCode = (hashCode * 59) + this.EventStartTime.GetHashCode();
                }
                if (this.EventEndTime != null)
                {
                    hashCode = (hashCode * 59) + this.EventEndTime.GetHashCode();
                }
                if (this.DurationUncertainty != null)
                {
                    hashCode = (hashCode * 59) + this.DurationUncertainty.GetHashCode();
                }
                if (this.Cause != null)
                {
                    hashCode = (hashCode * 59) + this.Cause.GetHashCode();
                }
                if (this.RelatedInformation != null)
                {
                    hashCode = (hashCode * 59) + this.RelatedInformation.GetHashCode();
                }
                if (this.OutageProfile != null)
                {
                    hashCode = (hashCode * 59) + this.OutageProfile.GetHashCode();
                }
                hashCode = (hashCode * 59) + this.Id.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
